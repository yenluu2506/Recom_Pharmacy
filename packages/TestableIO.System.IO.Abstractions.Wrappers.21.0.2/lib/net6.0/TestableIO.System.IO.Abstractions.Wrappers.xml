<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>TestableIO.System.IO.Abstractions.Wrappers</name>
    </assembly>
    <members>
        <member name="T:System.IO.Abstractions.DirectoryAclExtensions">
            <summary>
                ACL (access control list) extension methods for <see cref="T:System.IO.Abstractions.IDirectory" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryAclExtensions.CreateDirectory(System.IO.Abstractions.IDirectory,System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a directory and returns it, ensuring it is created with the specified directory security. If the directory already exists, the existing directory is returned.</summary><param name="directorySecurity">An object that determines the access control and audit security for the directory.</param><param name="path">The path of the directory to create.</param><exception cref="T:System.ArgumentNullException"><paramref name="directorySecurity" /> or <paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> is empty.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Could not find a part of the path.</exception><exception cref="T:System.UnauthorizedAccessException">Access to the path is denied.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryAclExtensions.GetAccessControl(System.IO.Abstractions.IDirectory,System.String)">
            <summary>Returns the security information of a directory.</summary><returns>The security descriptors of all the access control sections of the directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryAclExtensions.GetAccessControl(System.IO.Abstractions.IDirectory,System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Returns the security information of a directory.</summary><returns>The security descriptors of all the access control sections of the directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryAclExtensions.SetAccessControl(System.IO.Abstractions.IDirectory,System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Changes the security attributes of an existing directory.</summary><param name="directorySecurity">The security information to apply to the directory.</param><exception cref="T:System.ArgumentNullException"><paramref name="directorySecurity" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:System.IO.Abstractions.DirectoryBase">
            <summary>Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc />
        </member>
        <member name="P:System.IO.Abstractions.DirectoryBase.FileSystem">
            <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.CreateDirectory(System.String)">
            <summary>Creates all directories and subdirectories in the specified path unless they already exist.</summary><param name="path">The directory to create.</param><exception cref="T:System.IO.IOException">The directory specified by <paramref name="path" /> is a file.  
  
 -or-  
  
 The network name is not known.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="path" /> is prefixed with, or contains, only a colon character (:).</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> contains a colon character (:) that is not part of a drive label ("C:\").</exception><returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.CreateSymbolicLink(System.String,System.String)">
            <summary>Creates a directory symbolic link identified by <paramref name="path" /> that points to <paramref name="pathToTarget" />.</summary><param name="path">The path where the symbolic link should be created.</param><param name="pathToTarget">The target directory of the symbolic link.</param><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="pathToTarget" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> or <paramref name="pathToTarget" /> is empty.

-or-

<paramref name="path" /> or <paramref name="pathToTarget" /> contains invalid path characters.</exception><exception cref="T:System.IO.IOException">A file or directory already exists in the location of <paramref name="path" />.

-or-

An I/O error occurred.</exception><returns>A <see cref="T:System.IO.DirectoryInfo" /> instance that wraps the newly created directory symbolic link.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.Delete(System.String)">
            <summary>Deletes an empty directory from a specified path.</summary><param name="path">The name of the empty directory to remove. This directory must be writable and empty.</param><exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path" /> exists.  
  
 -or-  
  
 The directory is the application's current working directory.  
  
 -or-  
  
 The directory specified by <paramref name="path" /> is not empty.  
  
 -or-  
  
 The directory is read-only or contains a read-only file.  
  
 -or-  
  
 The directory is being used by another process.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> does not exist or could not be found.  
  
 -or-  
  
 The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.Delete(System.String,System.Boolean)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories and files in the directory.</summary><param name="path">The name of the directory to remove.</param><param name="recursive"><see langword="true" /> to remove directories, subdirectories, and files in <paramref name="path" />; otherwise, <see langword="false" />.</param><exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path" /> exists.  
  
 -or-  
  
 The directory specified by <paramref name="path" /> is read-only, or <paramref name="recursive" /> is <see langword="false" /> and <paramref name="path" /> is not an empty directory.  
  
 -or-  
  
 The directory is the application's current working directory.  
  
 -or-  
  
 The directory contains a read-only file.  
  
 -or-  
  
 The directory is being used by another process.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> does not exist or could not be found.  
  
 -or-  
  
 The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.Exists(System.String)">
            <summary>Determines whether the given path refers to an existing directory on disk.</summary><param name="path">The path to test.</param><returns><see langword="true" /> if <paramref name="path" /> refers to an existing directory; <see langword="false" /> if the directory does not exist or an error occurs when trying to determine if the specified directory exists.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetCreationTime(System.String)">
            <summary>Gets the creation date and time of a directory.</summary><param name="path">The path of the directory.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetCreationTimeUtc(System.String)">
            <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.</summary><param name="path">The path of the directory.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetCurrentDirectory">
            <summary>Gets the current working directory of the application.</summary><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException">The operating system is Windows CE, which does not have current directory functionality.  
  
 This method is available in the .NET Compact Framework, but is not currently supported.</exception><returns>A string that contains the absolute path of the current working directory, and does not end with a backslash (\).</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetDirectories(System.String)">
            <summary>Returns the names of subdirectories (including their paths) in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the full names (including paths) of subdirectories in the specified path, or an empty array if no directories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetDirectories(System.String,System.String)">
            <summary>Returns the names of subdirectories (including their paths) that match the specified search pattern in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters, but it doesn't support regular expressions.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> doesn't contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the full names (including paths) of the subdirectories that match the search pattern in the specified directory, or an empty array if no directories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the full names (including paths) of the subdirectories that match the specified criteria, or an empty array if no directories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetDirectories(System.String,System.String,System.IO.EnumerationOptions)">
            <summary>Returns the names of subdirectories (including their paths) that match the specified search pattern and enumeration options in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> doesn't contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the full names (including paths) of the subdirectories that match the search pattern and enumeration options in the specified directory, or an empty array if no directories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetDirectoryRoot(System.String)">
            <summary>Returns the volume information, root information, or both for the specified path.</summary><param name="path">The path of a file or directory.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><returns>A string that contains the volume information, root information, or both for the specified path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetFiles(System.String)">
            <summary>Returns the names of files (including their paths) in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.  
  
 -or-  
  
 A network error has occurred.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetFiles(System.String,System.String)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.  
  
 -or-  
  
 A network error has occurred.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> doesn't contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern, or an empty array if no files are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchpattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.  
  
 -or-  
  
 A network error has occurred.</exception><returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option, or an empty array if no files are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetFiles(System.String,System.String,System.IO.EnumerationOptions)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern and enumeration options in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.  
  
 -or-  
  
 A network error has occurred.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> doesn't contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and enumeration options, or an empty array if no files are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetFileSystemEntries(System.String)">
            <summary>Returns the names of all files and subdirectories in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the names of files and subdirectories in the specified directory, or an empty array if no files or subdirectories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetFileSystemEntries(System.String,System.String)">
            <summary>Returns an array of file names and directory names that match a search pattern in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of file and directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of file names and directory names that match the specified search criteria, or an empty array if no files or directories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files and directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An array of file the file names and directory names that match the specified search criteria, or an empty array if no files or directories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)">
            <summary>Returns an array of file names and directory names that match a search pattern and enumeration options in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.

-or-

<paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of file names and directory names that match the specified search pattern and enumeration options, or an empty array if no files or directories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetLastAccessTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to obtain access date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException">The <paramref name="path" /> parameter is in an invalid format.</exception><returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetLastAccessTimeUtc(System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to obtain access date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException">The <paramref name="path" /> parameter is in an invalid format.</exception><returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetLastWriteTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last written to.</summary><param name="path">The file or directory for which to obtain modification date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetLastWriteTimeUtc(System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.</summary><param name="path">The file or directory for which to obtain modification date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetLogicalDrives">
            <summary>Retrieves the names of the logical drives on this computer in the form "&lt;drive letter&gt;:\".</summary><exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error).</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>The logical drives on this computer.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.GetParent(System.String)">
            <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary><param name="path">The path for which to retrieve the parent directory.</param><exception cref="T:System.IO.IOException">The directory specified by <paramref name="path" /> is read-only.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For more information, see the <see cref="T:System.IO.PathTooLongException" /> topic.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">.NET Framework only: The caller does not have the required permissions.</exception><returns>The parent directory, or <see langword="null" /> if <paramref name="path" /> is the root directory, including the root of a UNC server or share name.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.Move(System.String,System.String)">
            <summary>Moves a file or a directory and its contents to a new location.</summary><param name="sourceDirName">The path of the file or directory to move.</param><param name="destDirName">The path to the new location for <paramref name="sourceDirName" />. If <paramref name="sourceDirName" /> is a file, then <paramref name="destDirName" /> must also be a file name.</param><exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume.
  
 -or-  
  
 <paramref name="destDirName" /> already exists. See the Note in the Remarks section.
  
 -or-  
  
 The <paramref name="sourceDirName" /> and <paramref name="destDirName" /> parameters refer to the same file or directory.  
  
 -or-  
  
 The directory or a file within it is being used by another process.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="sourceDirName" /> or <paramref name="destDirName" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="sourceDirName" /> or <paramref name="destDirName" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified by <paramref name="sourceDirName" /> is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.ResolveLinkTarget(System.String,System.Boolean)">
            <summary>Gets the target of the specified directory link.</summary><param name="linkPath">The path of the directory link.</param><param name="returnFinalTarget"><see langword="true" /> to follow links to the final target; <see langword="false" /> to return the immediate next link.</param><exception cref="T:System.IO.IOException">The directory on <paramref name="linkPath" /> does not exist.

-or-

There are too many levels of symbolic links.</exception><returns>A <see cref="T:System.IO.DirectoryInfo" /> instance if <paramref name="linkPath" /> exists, independently if the target exists or not. <see langword="null" /> if <paramref name="linkPath" /> is not a link.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the creation date and time for the specified file or directory.</summary><param name="path">The file or directory for which to set the creation date and time information.</param><param name="creationTime">The date and time the file or directory was last written to. This value is expressed in local time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.</summary><param name="path">The file or directory for which to set the creation date and time information.</param><param name="creationTimeUtc">The date and time the directory or file was created. This value is expressed in local time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.SetCurrentDirectory(System.String)">
            <summary>Sets the application's current working directory to the specified directory.</summary><param name="path">The path to which the current working directory is set.</param><exception cref="T:System.IO.IOException">An I/O error occurred.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access unmanaged code.</exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified directory was not found.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.SetLastAccessTime(System.String,System.DateTime)">
            <summary>Sets the date and time the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to set the access date and time information.</param><param name="lastAccessTime">An object that contains the value to set for the access date and time of <paramref name="path" />. This value is expressed in local time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to set the access date and time information.</param><param name="lastAccessTimeUtc">An object that  contains the value to set for the access date and time of <paramref name="path" />. This value is expressed in UTC time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Sets the date and time a directory was last written to.</summary><param name="path">The path of the directory.</param><param name="lastWriteTime">The date and time the directory was last written to. This value is expressed in local time.</param><exception cref="T:System.IO.FileNotFoundException"><paramref name="path" /> was not found (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> was not found (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.</summary><param name="path">The path of the directory.</param><param name="lastWriteTimeUtc">The date and time the directory was last written to. This value is expressed in UTC time.</param><exception cref="T:System.IO.FileNotFoundException"><paramref name="path" /> was not found (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> was not found (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateDirectories(System.String)">
            <summary>Returns an enumerable collection of directory full names in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateDirectories(System.String,System.String)">
            <summary>Returns an enumerable collection of directory full names that match a search pattern in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" /> and that match the specified search pattern.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory full names that match a search pattern in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" /> and that match the specified search pattern and search option.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateDirectories(System.String,System.String,System.IO.EnumerationOptions)">
            <summary>Returns an enumerable collection of the directory full names that match a search pattern in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" /> and that match the specified search pattern and enumeration options.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFiles(System.String)">
            <summary>Returns an enumerable collection of full file names in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFiles(System.String,System.String)">
            <summary>Returns an enumerable collection of full file names that match a search pattern in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" /> and that match the specified search pattern.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of full file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" /> and that match the specified search pattern and search option.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFiles(System.String,System.String,System.IO.EnumerationOptions)">
            <summary>Returns an enumerable collection of full file names that match a search pattern and enumeration options in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" /> and that match the specified search pattern and enumeration options.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFileSystemEntries(System.String)">
            <summary>Returns an enumerable collection of file names and directory names in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFileSystemEntries(System.String,System.String)">
            <summary>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of file-system entries in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" /> and that match the specified search pattern.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against file-system entries in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values  that specifies whether the search operation should include only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" /> and that match the specified search pattern and option.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryBase.EnumerateFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)">
            <summary>Returns an enumerable collection of file names and directory names that match a search pattern and enumeration options in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" />, that match the specified search pattern and the specified enumeration options.</returns>
        </member>
        <member name="T:System.IO.Abstractions.DirectoryInfoAclExtensions">
            <summary>
                ACL (access control list) extension methods for <see cref="T:System.IO.Abstractions.IDirectoryInfo" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoAclExtensions.Create(System.IO.Abstractions.IDirectoryInfo,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a new directory, ensuring it is created with the specified directory security. If the directory already exists, nothing is done.</summary><param name="directoryInfo">A directory that does not exist yet that will be created by the method.</param><param name="directorySecurity">The access control and audit security for the directory.</param><exception cref="T:System.ArgumentNullException"><paramref name="directoryInfo" /> or <paramref name="directorySecurity" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">Could not find a part of the path.</exception><exception cref="T:System.UnauthorizedAccessException">Access to the path is denied.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoAclExtensions.GetAccessControl(System.IO.Abstractions.IDirectoryInfo)">
            <summary>Returns the security information of a directory.</summary><param name="directoryInfo">The existing directory from which to obtain the security information.</param><returns>The security descriptors of all the access control sections of the directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoAclExtensions.GetAccessControl(System.IO.Abstractions.IDirectoryInfo,System.Security.AccessControl.AccessControlSections)">
            <summary>Returns the security information of a directory.</summary><param name="directoryInfo">An existing directory from which to obtain the security information.</param><param name="includeSections">The desired access control sections to retrieve.</param><returns>The security descriptors of the specified access control sections of the directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoAclExtensions.SetAccessControl(System.IO.Abstractions.IDirectoryInfo,System.Security.AccessControl.DirectorySecurity)">
            <summary>Changes the security attributes of an existing directory.</summary><param name="directoryInfo">An existing directory.</param><param name="directorySecurity">The security information to apply to the directory.</param><exception cref="T:System.ArgumentNullException"><paramref name="directorySecurity" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:System.IO.Abstractions.DirectoryInfoBase">
            <summary>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.Create">
            <summary>Creates a directory.</summary><exception cref="T:System.IO.IOException">The directory cannot be created.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.CreateSubdirectory(System.String)">
            <summary>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:System.IO.DirectoryInfo" /> class.</summary><param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> does not specify a valid file path or contains invalid <see langword="DirectoryInfo" /> characters.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.IOException">The subdirectory cannot be created.  
  
 -or-  
  
 A file or directory already has the name specified by <paramref name="path" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have code access permission to create the directory.  
  
 -or-  
  
 The caller does not have code access permission to read the directory described by the returned <see cref="T:System.IO.DirectoryInfo" /> object.  This can occur when the <paramref name="path" /> parameter describes an existing directory.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> contains a colon character (:) that is not part of a drive label ("C:\").</exception><returns>The last directory specified in <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.Delete(System.Boolean)">
            <summary>Deletes this instance of a <see cref="T:System.IO.DirectoryInfo" />, specifying whether to delete subdirectories and files.</summary><param name="recursive"><see langword="true" /> to delete this directory, its subdirectories, and all files; otherwise, <see langword="false" />.</param><exception cref="T:System.UnauthorizedAccessException">The directory contains a read-only file.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The directory described by this <see cref="T:System.IO.DirectoryInfo" /> object does not exist or could not be found.</exception><exception cref="T:System.IO.IOException">The directory is read-only.  
  
 -or-  
  
 The directory contains one or more files or subdirectories and <paramref name="recursive" /> is <see langword="false" />.  
  
 -or-  
  
 The directory is the application's current working directory.  
  
 -or-  
  
 There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateDirectories">
            <summary>Returns an enumerable collection of directory information in the current directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of directories in the current directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateDirectories(System.String)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of directories that matches <paramref name="searchPattern" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateDirectories(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of directories that matches <paramref name="searchPattern" /> and <paramref name="searchOption" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateDirectories(System.String,System.IO.EnumerationOptions)">
            <summary>Returns an enumerable collection of directory information that matches the specified search pattern and enumeration options.</summary><param name="searchPattern">The search string to match against the names of directories. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of directories that matches <paramref name="searchPattern" /> and <paramref name="enumerationOptions" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFiles">
            <summary>Returns an enumerable collection of file information in the current directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of the files in the current directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFiles(System.String)">
            <summary>Returns an enumerable collection of file information that matches a search pattern.</summary><param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of files that matches <paramref name="searchPattern" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFiles(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.</summary><param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of files that matches <paramref name="searchPattern" /> and <paramref name="searchOption" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFiles(System.String,System.IO.EnumerationOptions)">
            <summary>Returns an enumerable collection of file information that matches the specified search pattern and enumeration options.</summary><param name="searchPattern">The search string to match against the names of files. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of files that matches <paramref name="searchPattern" /> and <paramref name="enumerationOptions" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFileSystemInfos">
            <summary>Returns an enumerable collection of file system information in the current directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of file system information in the current directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFileSystemInfos(System.String)">
            <summary>Returns an enumerable collection of file system information that matches a specified search pattern.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern" /> and <paramref name="searchOption" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.EnumerateFileSystemInfos(System.String,System.IO.EnumerationOptions)">
            <summary>Returns an enumerable collection of file system information that matches the specified search pattern and enumeration options.</summary><param name="searchPattern">The search string to match against the names of directories. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern" /> and <paramref name="enumerationOptions" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetDirectories">
            <summary>Returns the subdirectories of the current directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An array of <see cref="T:System.IO.DirectoryInfo" /> objects.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetDirectories(System.String)">
            <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo" /> matching the given search criteria.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see langword="DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An array of type <see langword="DirectoryInfo" /> matching <paramref name="searchPattern" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo" /> matching the given search criteria and using a value to determine whether to search subdirectories.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see langword="DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An array of type <see langword="DirectoryInfo" /> matching <paramref name="searchPattern" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetDirectories(System.String,System.IO.EnumerationOptions)">
            <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo" /> matching the specified search pattern and enumeration options.</summary><param name="searchPattern">The search string to match against the names of directories. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see langword="DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An array of type <see langword="DirectoryInfo" /> matching <paramref name="searchPattern" /> and <paramref name="enumerationOptions" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFiles">
            <summary>Returns a file list from the current directory matching the given search pattern.</summary><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An array of type <see cref="T:System.IO.FileInfo" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFiles(System.String)">
            <summary>Returns a file list from the current directory matching the given search pattern.</summary><param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An array of type <see cref="T:System.IO.FileInfo" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFiles(System.String,System.IO.SearchOption)">
            <summary>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</summary><param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An array of type <see cref="T:System.IO.FileInfo" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFiles(System.String,System.IO.EnumerationOptions)">
            <summary>Returns a file list from the current directory matching the specified search pattern and enumeration options.</summary><param name="searchPattern">The search string to match against the names of files. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An array of strongly typed <see cref="T:System.IO.FileInfo" /> objects that match <paramref name="searchPattern" /> and <paramref name="enumerationOptions" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFileSystemInfos">
            <summary>Returns an array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> entries representing all the files and subdirectories in a directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> entries.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFileSystemInfos(System.String)">
            <summary>Retrieves an array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> objects representing the files and subdirectories that match the specified search criteria.</summary><param name="searchPattern">The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An array of strongly typed <see langword="FileSystemInfo" /> objects matching the search criteria.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>Retrieves an array of <see cref="T:System.IO.FileSystemInfo" /> objects that represent the files and subdirectories matching the specified search criteria.</summary><param name="searchPattern">The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An array of file system entries that match the search criteria.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.GetFileSystemInfos(System.String,System.IO.EnumerationOptions)">
            <summary>Retrieves an array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> objects representing the files and subdirectories that match the specified search pattern and enumeration options.</summary><param name="searchPattern">The search string to match against the names of directories and files. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An array of strongly typed <see langword="FileSystemInfo" /> objects matching <paramref name="searchPattern" /> and <paramref name="enumerationOptions" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.MoveTo(System.String)">
            <summary>Moves a <see cref="T:System.IO.DirectoryInfo" /> instance and its contents to a new path.</summary><param name="destDirName">The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.</param><exception cref="T:System.ArgumentNullException"><paramref name="destDirName" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="destDirName" /> is an empty string (''").</exception><exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume.  
  
 -or-  
  
 <paramref name="destDirName" /> already exists.  
  
 -or-  
  
 You are not authorized to access this path.  
  
 -or-  
  
 The directory being moved and the destination directory have the same name.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The destination directory cannot be found.</exception>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoBase.Parent">
            <summary>Gets the parent directory of a specified subdirectory.</summary><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>The parent directory, or <see langword="null" /> if the path is null or if the file path denotes a root (such as \, C:\, or \\server\share).</returns>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoBase.Root">
            <summary>Gets the root portion of the directory.</summary><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An object that represents the root of the directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoBase.op_Implicit(System.IO.DirectoryInfo)~System.IO.Abstractions.DirectoryInfoBase">
            <inheritdoc />
        </member>
        <member name="T:System.IO.Abstractions.DirectoryInfoWrapper">
            <summary>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.#ctor(System.IO.Abstractions.IFileSystem,System.IO.DirectoryInfo)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.CreateAsSymbolicLink(System.String)">
            <summary>Creates a symbolic link located in <see cref="P:System.IO.FileSystemInfo.FullName" /> that points to the specified <paramref name="pathToTarget" />.</summary><param name="pathToTarget">The path of the symbolic link target.</param><exception cref="T:System.ArgumentNullException"><paramref name="pathToTarget" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="pathToTarget" /> is empty.

-or-

<paramref name="pathToTarget" /> contains invalid path characters.</exception><exception cref="T:System.IO.IOException">A file or directory already exists in the location of <see cref="P:System.IO.FileSystemInfo.FullName" />.

-or-

An I/O error occurred.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.Delete">
            <summary>Deletes a file or directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception><exception cref="T:System.IO.IOException">There is an open handle on the file or directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.Refresh">
            <summary>Refreshes the state of the object.</summary><exception cref="T:System.IO.IOException">A device such as a disk drive is not ready.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.ResolveLinkTarget(System.Boolean)">
            <summary>Gets the target of the specified link.</summary><param name="returnFinalTarget"><see langword="true" /> to follow links to the final target; <see langword="false" /> to return the immediate next link.</param><exception cref="T:System.IO.IOException">The file or directory does not exist.

-or-

There are too many levels of symbolic links.</exception><returns>A <see cref="T:System.IO.FileSystemInfo" /> instance if the link exists, independently if the target exists or not; <see langword="null" /> if this file or directory is not a link.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Attributes">
            <summary>Gets or sets the attributes for the current file or directory.</summary><exception cref="T:System.IO.FileNotFoundException">The specified file doesn't exist. Only thrown when setting the property value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid. For example, it's on an unmapped drive. Only thrown when setting the property value.</exception><exception cref="T:System.Security.SecurityException">The caller doesn't have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">.NET Core and .NET 5+ only: The user attempts to set an attribute value but doesn't have write permission.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.ArgumentException">The caller attempts to set an invalid file attribute.  
  
 -or-  
  
 .NET Framework only: The user attempts to set an attribute value but doesn't have write permission.</exception><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><returns><see cref="T:System.IO.FileAttributes" /> of the current <see cref="T:System.IO.FileSystemInfo" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.CreationTime">
            <summary>Gets or sets the creation time of the current file or directory.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid creation time.</exception><returns>The creation date and time of the current <see cref="T:System.IO.FileSystemInfo" /> object.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.CreationTimeUtc">
            <summary>Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception><returns>The creation date and time in UTC format of the current <see cref="T:System.IO.FileSystemInfo" /> object.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Exists">
            <summary>Gets a value indicating whether the file or directory exists.</summary><returns><see langword="true" /> if the file or directory exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Extension">
            <summary>Gets the extension part of the file name, including the leading dot <c>.</c> even if it is the entire file name, or an empty string if no extension is present.</summary><returns>A string containing the <see cref="T:System.IO.FileSystemInfo" /> extension.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.FullName">
            <summary>Gets the full path of the directory or file.</summary><exception cref="T:System.IO.PathTooLongException">The fully qualified path and file name exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A string containing the full path.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.LastAccessTime">
            <summary>Gets or sets the time the current file or directory was last accessed.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time</exception><returns>The time that the current file or directory was last accessed.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.LastAccessTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception><returns>The UTC time that the current file or directory was last accessed.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.LastWriteTime">
            <summary>Gets or sets the time when the current file or directory was last written to.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception><returns>The time the current file was last written.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.LastWriteTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception><returns>The UTC time when the current file was last written to.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.LinkTarget">
            <summary>If this <see cref="T:System.IO.FileSystemInfo" /> instance represents a link, returns the link target's path.
            If a link does not exist in <see cref="P:System.IO.FileSystemInfo.FullName" />, or this instance does not represent a link, returns <see langword="null" />.</summary>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Name">
            <summary>For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the <see langword="Name" /> property gets the name of the directory.</summary><returns>A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.Create">
            <summary>Creates a directory.</summary><exception cref="T:System.IO.IOException">The directory cannot be created.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.CreateSubdirectory(System.String)">
            <summary>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:System.IO.DirectoryInfo" /> class.</summary><param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> does not specify a valid file path or contains invalid <see langword="DirectoryInfo" /> characters.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.IOException">The subdirectory cannot be created.  
  
 -or-  
  
 A file or directory already has the name specified by <paramref name="path" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have code access permission to create the directory.  
  
 -or-  
  
 The caller does not have code access permission to read the directory described by the returned <see cref="T:System.IO.DirectoryInfo" /> object.  This can occur when the <paramref name="path" /> parameter describes an existing directory.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> contains a colon character (:) that is not part of a drive label ("C:\").</exception><returns>The last directory specified in <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.Delete(System.Boolean)">
            <summary>Deletes this instance of a <see cref="T:System.IO.DirectoryInfo" />, specifying whether to delete subdirectories and files.</summary><param name="recursive"><see langword="true" /> to delete this directory, its subdirectories, and all files; otherwise, <see langword="false" />.</param><exception cref="T:System.UnauthorizedAccessException">The directory contains a read-only file.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The directory described by this <see cref="T:System.IO.DirectoryInfo" /> object does not exist or could not be found.</exception><exception cref="T:System.IO.IOException">The directory is read-only.  
  
 -or-  
  
 The directory contains one or more files or subdirectories and <paramref name="recursive" /> is <see langword="false" />.  
  
 -or-  
  
 The directory is the application's current working directory.  
  
 -or-  
  
 There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateDirectories">
            <summary>Returns an enumerable collection of directory information in the current directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of directories in the current directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateDirectories(System.String)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of directories that matches <paramref name="searchPattern" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateDirectories(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of directories that matches <paramref name="searchPattern" /> and <paramref name="searchOption" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateDirectories(System.String,System.IO.EnumerationOptions)">
            <summary>Returns an enumerable collection of directory information that matches the specified search pattern and enumeration options.</summary><param name="searchPattern">The search string to match against the names of directories. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of directories that matches <paramref name="searchPattern" /> and <paramref name="enumerationOptions" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFiles">
            <summary>Returns an enumerable collection of file information in the current directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of the files in the current directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFiles(System.String)">
            <summary>Returns an enumerable collection of file information that matches a search pattern.</summary><param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of files that matches <paramref name="searchPattern" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFiles(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.</summary><param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of files that matches <paramref name="searchPattern" /> and <paramref name="searchOption" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFiles(System.String,System.IO.EnumerationOptions)">
            <summary>Returns an enumerable collection of file information that matches the specified search pattern and enumeration options.</summary><param name="searchPattern">The search string to match against the names of files. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of files that matches <paramref name="searchPattern" /> and <paramref name="enumerationOptions" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFileSystemInfos">
            <summary>Returns an enumerable collection of file system information in the current directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of file system information in the current directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFileSystemInfos(System.String)">
            <summary>Returns an enumerable collection of file system information that matches a specified search pattern.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern" /> and <paramref name="searchOption" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.EnumerateFileSystemInfos(System.String,System.IO.EnumerationOptions)">
            <summary>Returns an enumerable collection of file system information that matches the specified search pattern and enumeration options.</summary><param name="searchPattern">The search string to match against the names of directories. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An enumerable collection of file system information objects that matches <paramref name="searchPattern" /> and <paramref name="enumerationOptions" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetDirectories">
            <summary>Returns the subdirectories of the current directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see cref="T:System.IO.DirectoryInfo" /> object is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An array of <see cref="T:System.IO.DirectoryInfo" /> objects.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetDirectories(System.String)">
            <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo" /> matching the given search criteria.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see langword="DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An array of type <see langword="DirectoryInfo" /> matching <paramref name="searchPattern" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo" /> matching the given search criteria and using a value to determine whether to search subdirectories.</summary><param name="searchPattern">The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see langword="DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An array of type <see langword="DirectoryInfo" /> matching <paramref name="searchPattern" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetDirectories(System.String,System.IO.EnumerationOptions)">
            <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo" /> matching the specified search pattern and enumeration options.</summary><param name="searchPattern">The search string to match against the names of directories. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the <see langword="DirectoryInfo" /> object is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An array of type <see langword="DirectoryInfo" /> matching <paramref name="searchPattern" /> and <paramref name="enumerationOptions" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFiles">
            <summary>Returns a file list from the current directory matching the given search pattern.</summary><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An array of type <see cref="T:System.IO.FileInfo" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFiles(System.String)">
            <summary>Returns a file list from the current directory matching the given search pattern.</summary><param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An array of type <see cref="T:System.IO.FileInfo" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFiles(System.String,System.IO.SearchOption)">
            <summary>Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.</summary><param name="searchPattern">The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An array of type <see cref="T:System.IO.FileInfo" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFiles(System.String,System.IO.EnumerationOptions)">
            <summary>Returns a file list from the current directory matching the specified search pattern and enumeration options.</summary><param name="searchPattern">The search string to match against the names of files. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An array of strongly typed <see cref="T:System.IO.FileInfo" /> objects that match <paramref name="searchPattern" /> and <paramref name="enumerationOptions" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFileSystemInfos">
            <summary>Returns an array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> entries representing all the files and subdirectories in a directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> entries.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFileSystemInfos(System.String)">
            <summary>Retrieves an array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> objects representing the files and subdirectories that match the specified search criteria.</summary><param name="searchPattern">The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An array of strongly typed <see langword="FileSystemInfo" /> objects matching the search criteria.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFileSystemInfos(System.String,System.IO.SearchOption)">
            <summary>Retrieves an array of <see cref="T:System.IO.FileSystemInfo" /> objects that represent the files and subdirectories matching the specified search criteria.</summary><param name="searchPattern">The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An array of file system entries that match the search criteria.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetFileSystemInfos(System.String,System.IO.EnumerationOptions)">
            <summary>Retrieves an array of strongly typed <see cref="T:System.IO.FileSystemInfo" /> objects representing the files and subdirectories that match the specified search pattern and enumeration options.</summary><param name="searchPattern">The search string to match against the names of directories and files. This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="searchPattern" /> contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An array of strongly typed <see langword="FileSystemInfo" /> objects matching <paramref name="searchPattern" /> and <paramref name="enumerationOptions" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.MoveTo(System.String)">
            <summary>Moves a <see cref="T:System.IO.DirectoryInfo" /> instance and its contents to a new path.</summary><param name="destDirName">The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.</param><exception cref="T:System.ArgumentNullException"><paramref name="destDirName" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="destDirName" /> is an empty string (''").</exception><exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume.  
  
 -or-  
  
 <paramref name="destDirName" /> already exists.  
  
 -or-  
  
 You are not authorized to access this path.  
  
 -or-  
  
 The directory being moved and the destination directory have the same name.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The destination directory cannot be found.</exception>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Parent">
            <summary>Gets the parent directory of a specified subdirectory.</summary><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>The parent directory, or <see langword="null" /> if the path is null or if the file path denotes a root (such as \, C:\, or \\server\share).</returns>
        </member>
        <member name="P:System.IO.Abstractions.DirectoryInfoWrapper.Root">
            <summary>Gets the root portion of the directory.</summary><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>An object that represents the root of the directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.ToString">
            <summary>Returns a string that represents the current object.</summary><returns>A string that represents the current object.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetAccessControl">
            <summary>
                Gets a access control object that encapsulates the access control list (ACL) entries for the file or directory in the file system.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections)">
            <summary>
                Gets a access control object that encapsulates the access control list (ACL) entries for the file or directory in the file system.
            </summary><param name="includeSections">One of the <see cref="T:System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections" /> values that specifies the type of access control list (ACL) information to receive.</param>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryInfoWrapper.SetAccessControl(System.Object)">
            <summary>
                Applies access control list (ACL) entries described by the <paramref name="value" /> object to the file or directory in the file system.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.DirectoryWrapper">
            <summary>Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.CreateDirectory(System.String)">
            <summary>Creates all directories and subdirectories in the specified path unless they already exist.</summary><param name="path">The directory to create.</param><exception cref="T:System.IO.IOException">The directory specified by <paramref name="path" /> is a file.  
  
 -or-  
  
 The network name is not known.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="path" /> is prefixed with, or contains, only a colon character (:).</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> contains a colon character (:) that is not part of a drive label ("C:\").</exception><returns>An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.CreateSymbolicLink(System.String,System.String)">
            <summary>Creates a directory symbolic link identified by <paramref name="path" /> that points to <paramref name="pathToTarget" />.</summary><param name="path">The path where the symbolic link should be created.</param><param name="pathToTarget">The target directory of the symbolic link.</param><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="pathToTarget" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> or <paramref name="pathToTarget" /> is empty.

-or-

<paramref name="path" /> or <paramref name="pathToTarget" /> contains invalid path characters.</exception><exception cref="T:System.IO.IOException">A file or directory already exists in the location of <paramref name="path" />.

-or-

An I/O error occurred.</exception><returns>A <see cref="T:System.IO.DirectoryInfo" /> instance that wraps the newly created directory symbolic link.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.Delete(System.String)">
            <summary>Deletes an empty directory from a specified path.</summary><param name="path">The name of the empty directory to remove. This directory must be writable and empty.</param><exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path" /> exists.  
  
 -or-  
  
 The directory is the application's current working directory.  
  
 -or-  
  
 The directory specified by <paramref name="path" /> is not empty.  
  
 -or-  
  
 The directory is read-only or contains a read-only file.  
  
 -or-  
  
 The directory is being used by another process.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> does not exist or could not be found.  
  
 -or-  
  
 The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.Delete(System.String,System.Boolean)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories and files in the directory.</summary><param name="path">The name of the directory to remove.</param><param name="recursive"><see langword="true" /> to remove directories, subdirectories, and files in <paramref name="path" />; otherwise, <see langword="false" />.</param><exception cref="T:System.IO.IOException">A file with the same name and location specified by <paramref name="path" /> exists.  
  
 -or-  
  
 The directory specified by <paramref name="path" /> is read-only, or <paramref name="recursive" /> is <see langword="false" /> and <paramref name="path" /> is not an empty directory.  
  
 -or-  
  
 The directory is the application's current working directory.  
  
 -or-  
  
 The directory contains a read-only file.  
  
 -or-  
  
 The directory is being used by another process.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> does not exist or could not be found.  
  
 -or-  
  
 The specified path is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.Exists(System.String)">
            <summary>Determines whether the given path refers to an existing directory on disk.</summary><param name="path">The path to test.</param><returns><see langword="true" /> if <paramref name="path" /> refers to an existing directory; <see langword="false" /> if the directory does not exist or an error occurs when trying to determine if the specified directory exists.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetCreationTime(System.String)">
            <summary>Gets the creation date and time of a directory.</summary><param name="path">The path of the directory.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetCreationTimeUtc(System.String)">
            <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.</summary><param name="path">The path of the directory.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><returns>A structure that is set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetCurrentDirectory">
            <summary>Gets the current working directory of the application.</summary><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException">The operating system is Windows CE, which does not have current directory functionality.  
  
 This method is available in the .NET Compact Framework, but is not currently supported.</exception><returns>A string that contains the absolute path of the current working directory, and does not end with a backslash (\).</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetDirectories(System.String)">
            <summary>Returns the names of subdirectories (including their paths) in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the full names (including paths) of subdirectories in the specified path, or an empty array if no directories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetDirectories(System.String,System.String)">
            <summary>Returns the names of subdirectories (including their paths) that match the specified search pattern in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters, but it doesn't support regular expressions.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> doesn't contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the full names (including paths) of the subdirectories that match the search pattern in the specified directory, or an empty array if no directories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the full names (including paths) of the subdirectories that match the specified criteria, or an empty array if no directories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetDirectories(System.String,System.String,System.IO.EnumerationOptions)">
            <summary>Returns the names of subdirectories (including their paths) that match the specified search pattern and enumeration options in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> doesn't contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the full names (including paths) of the subdirectories that match the search pattern and enumeration options in the specified directory, or an empty array if no directories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetDirectoryRoot(System.String)">
            <summary>Returns the volume information, root information, or both for the specified path.</summary><param name="path">The path of a file or directory.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><returns>A string that contains the volume information, root information, or both for the specified path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFiles(System.String)">
            <summary>Returns the names of files (including their paths) in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.  
  
 -or-  
  
 A network error has occurred.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFiles(System.String,System.String)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.  
  
 -or-  
  
 A network error has occurred.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> doesn't contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern, or an empty array if no files are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchpattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.  
  
 -or-  
  
 A network error has occurred.</exception><returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option, or an empty array if no files are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFiles(System.String,System.String,System.IO.EnumerationOptions)">
            <summary>Returns the names of files (including their paths) that match the specified search pattern and enumeration options in the specified directory.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.  
  
 -or-  
  
 A network error has occurred.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using <see cref="M:System.IO.Path.GetInvalidPathChars" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> doesn't contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is not found or is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and enumeration options, or an empty array if no files are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFileSystemEntries(System.String)">
            <summary>Returns the names of all files and subdirectories in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of the names of files and subdirectories in the specified directory, or an empty array if no files or subdirectories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFileSystemEntries(System.String,System.String)">
            <summary>Returns an array of file names and directory names that match a search pattern in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of file and directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of file names and directory names that match the specified search criteria, or an empty array if no files or directories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an array of all the file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files and directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An array of file the file names and directory names that match the specified search criteria, or an empty array if no files or directories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)">
            <summary>Returns an array of file names and directory names that match a search pattern and enumeration options in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.

-or-

<paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><returns>An array of file names and directory names that match the specified search pattern and enumeration options, or an empty array if no files or directories are found.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetLastAccessTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to obtain access date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException">The <paramref name="path" /> parameter is in an invalid format.</exception><returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetLastAccessTimeUtc(System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to obtain access date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException">The <paramref name="path" /> parameter is in an invalid format.</exception><returns>A structure that is set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetLastWriteTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last written to.</summary><param name="path">The file or directory for which to obtain modification date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetLastWriteTimeUtc(System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.</summary><param name="path">The file or directory for which to obtain modification date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><returns>A structure that is set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetLogicalDrives">
            <summary>Retrieves the names of the logical drives on this computer in the form "&lt;drive letter&gt;:\".</summary><exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error).</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>The logical drives on this computer.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.GetParent(System.String)">
            <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary><param name="path">The path for which to retrieve the parent directory.</param><exception cref="T:System.IO.IOException">The directory specified by <paramref name="path" /> is read-only.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For more information, see the <see cref="T:System.IO.PathTooLongException" /> topic.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">.NET Framework only: The caller does not have the required permissions.</exception><returns>The parent directory, or <see langword="null" /> if <paramref name="path" /> is the root directory, including the root of a UNC server or share name.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.Move(System.String,System.String)">
            <summary>Moves a file or a directory and its contents to a new location.</summary><param name="sourceDirName">The path of the file or directory to move.</param><param name="destDirName">The path to the new location for <paramref name="sourceDirName" />. If <paramref name="sourceDirName" /> is a file, then <paramref name="destDirName" /> must also be a file name.</param><exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume.
  
 -or-  
  
 <paramref name="destDirName" /> already exists. See the Note in the Remarks section.
  
 -or-  
  
 The <paramref name="sourceDirName" /> and <paramref name="destDirName" /> parameters refer to the same file or directory.  
  
 -or-  
  
 The directory or a file within it is being used by another process.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="sourceDirName" /> or <paramref name="destDirName" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="sourceDirName" /> or <paramref name="destDirName" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified by <paramref name="sourceDirName" /> is invalid (for example, it is on an unmapped drive).</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.ResolveLinkTarget(System.String,System.Boolean)">
            <summary>Gets the target of the specified directory link.</summary><param name="linkPath">The path of the directory link.</param><param name="returnFinalTarget"><see langword="true" /> to follow links to the final target; <see langword="false" /> to return the immediate next link.</param><exception cref="T:System.IO.IOException">The directory on <paramref name="linkPath" /> does not exist.

-or-

There are too many levels of symbolic links.</exception><returns>A <see cref="T:System.IO.DirectoryInfo" /> instance if <paramref name="linkPath" /> exists, independently if the target exists or not. <see langword="null" /> if <paramref name="linkPath" /> is not a link.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the creation date and time for the specified file or directory.</summary><param name="path">The file or directory for which to set the creation date and time information.</param><param name="creationTime">The date and time the file or directory was last written to. This value is expressed in local time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.</summary><param name="path">The file or directory for which to set the creation date and time information.</param><param name="creationTimeUtc">The date and time the directory or file was created. This value is expressed in local time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.SetCurrentDirectory(System.String)">
            <summary>Sets the application's current working directory to the specified directory.</summary><param name="path">The path to which the current working directory is set.</param><exception cref="T:System.IO.IOException">An I/O error occurred.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access unmanaged code.</exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified directory was not found.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.SetLastAccessTime(System.String,System.DateTime)">
            <summary>Sets the date and time the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to set the access date and time information.</param><param name="lastAccessTime">An object that contains the value to set for the access date and time of <paramref name="path" />. This value is expressed in local time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to set the access date and time information.</param><param name="lastAccessTimeUtc">An object that  contains the value to set for the access date and time of <paramref name="path" />. This value is expressed in UTC time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Sets the date and time a directory was last written to.</summary><param name="path">The path of the directory.</param><param name="lastWriteTime">The date and time the directory was last written to. This value is expressed in local time.</param><exception cref="T:System.IO.FileNotFoundException"><paramref name="path" /> was not found (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> was not found (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.</summary><param name="path">The path of the directory.</param><param name="lastWriteTimeUtc">The date and time the directory was last written to. This value is expressed in UTC time.</param><exception cref="T:System.IO.FileNotFoundException"><paramref name="path" /> was not found (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> was not found (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateDirectories(System.String)">
            <summary>Returns an enumerable collection of directory full names in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateDirectories(System.String,System.String)">
            <summary>Returns an enumerable collection of directory full names that match a search pattern in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters with the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" /> and that match the specified search pattern.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of directory full names that match a search pattern in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" /> and that match the specified search pattern and search option.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateDirectories(System.String,System.String,System.IO.EnumerationOptions)">
            <summary>Returns an enumerable collection of the directory full names that match a search pattern in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" /> and that match the specified search pattern and enumeration options.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFiles(System.String)">
            <summary>Returns an enumerable collection of full file names in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFiles(System.String,System.String)">
            <summary>Returns an enumerable collection of full file names that match a search pattern in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" /> and that match the specified search pattern.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of full file names that match a search pattern in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" /> and that match the specified search pattern and search option.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFiles(System.String,System.String,System.IO.EnumerationOptions)">
            <summary>Returns an enumerable collection of full file names that match a search pattern and enumeration options in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of files in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" /> and that match the specified search pattern and enumeration options.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFileSystemEntries(System.String)">
            <summary>Returns an enumerable collection of file names and directory names in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFileSystemEntries(System.String,System.String)">
            <summary>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of file-system entries in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" /> and that match the specified search pattern.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns an enumerable collection of file names and directory names that match a search pattern in a specified path, and optionally searches subdirectories.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against file-system entries in <paramref name="path" />.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters, but it doesn't support regular expressions.</param><param name="searchOption">One of the enumeration values  that specifies whether the search operation should include only the current directory or should include all subdirectories. The default value is <see cref="F:System.IO.SearchOption.TopDirectoryOnly" />.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" /> and that match the specified search pattern and option.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DirectoryWrapper.EnumerateFileSystemEntries(System.String,System.String,System.IO.EnumerationOptions)">
            <summary>Returns an enumerable collection of file names and directory names that match a search pattern and enumeration options in a specified path.</summary><param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param><param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wildcard characters, but it doesn't support regular expressions.</param><param name="enumerationOptions">An object that describes the search and enumeration configuration to use.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="searchPattern" /> does not contain a valid pattern.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="searchPattern" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="searchOption" /> is not a valid <see cref="T:System.IO.SearchOption" /> value.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid, such as referring to an unmapped drive.</exception><exception cref="T:System.IO.IOException"><paramref name="path" /> is a file name.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or combined exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>An enumerable collection of file-system entries in the directory specified by <paramref name="path" />, that match the specified search pattern and the specified enumeration options.</returns>
        </member>
        <member name="T:System.IO.Abstractions.DriveInfoBase">
            <summary>Provides access to information on a drive.</summary>
        </member>
        <member name="M:System.IO.Abstractions.DriveInfoBase.#ctor(System.IO.Abstractions.IFileSystem)">
            <summary>Provides access to information on a drive.</summary>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.FileSystem">
            <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.AvailableFreeSpace">
            <summary>Indicates the amount of available free space on a drive, in bytes.</summary><exception cref="T:System.UnauthorizedAccessException">Access to the drive information is denied.</exception><exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception><returns>The amount of free space available on the drive, in bytes.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.DriveFormat">
            <summary>Gets the name of the file system, such as NTFS or FAT32.</summary><exception cref="T:System.UnauthorizedAccessException">Access to the drive information is denied.</exception><exception cref="T:System.IO.DriveNotFoundException">The drive does not exist or is not mapped.</exception><exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception><returns>The name of the file system on the specified drive.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.DriveType">
            <summary>Gets the drive type, such as CD-ROM, removable, network, or fixed.</summary><returns>One of the enumeration values that specifies a drive type.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.IsReady">
            <summary>Gets a value that indicates whether a drive is ready.</summary><returns><see langword="true" /> if the drive is ready; <see langword="false" /> if the drive is not ready.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.Name">
            <summary>Gets the name of a drive, such as C:\.</summary><returns>The name of the drive.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.RootDirectory">
            <summary>Gets the root directory of a drive.</summary><returns>An object that contains the root directory of the drive.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.TotalFreeSpace">
            <summary>Gets the total amount of free space available on a drive, in bytes.</summary><exception cref="T:System.UnauthorizedAccessException">Access to the drive information is denied.</exception><exception cref="T:System.IO.DriveNotFoundException">The drive is not mapped or does not exist.</exception><exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception><returns>The total free space available on a drive, in bytes.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.TotalSize">
            <summary>Gets the total size of storage space on a drive, in bytes.</summary><exception cref="T:System.UnauthorizedAccessException">Access to the drive information is denied.</exception><exception cref="T:System.IO.DriveNotFoundException">The drive is not mapped or does not exist.</exception><exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception><returns>The total size of the drive, in bytes.</returns>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoBase.VolumeLabel">
            <summary>Gets or sets the volume label of a drive.</summary><exception cref="T:System.IO.IOException">An I/O error occurred (for example, a disk error or a drive was not ready).</exception><exception cref="T:System.IO.DriveNotFoundException">The drive is not mapped or does not exist.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">The volume label is being set on a network or CD-ROM drive.  
  
 -or-  
  
 Access to the drive information is denied.</exception><returns>The volume label.</returns>
        </member>
        <member name="M:System.IO.Abstractions.DriveInfoBase.op_Implicit(System.IO.DriveInfo)~System.IO.Abstractions.DriveInfoBase">
            <summary>
            Converts a <see cref="T:System.IO.DriveInfo" /> into a <see cref="T:System.IO.Abstractions.DriveInfoBase" />.
            </summary>
            <param name="driveInfo">The drive info to be converted.</param>
        </member>
        <member name="T:System.IO.Abstractions.DriveInfoWrapper">
            <summary>
            The wrapper for a <see cref="T:System.IO.DriveInfo" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.DriveInfoWrapper.#ctor(System.IO.Abstractions.IFileSystem,System.IO.DriveInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Abstractions.DriveInfoWrapper" /> class, which acts as a wrapper for a drive info.
            </summary>
            <param name="fileSystem">The underlying IFileSystem.</param>
            <param name="instance">The drive info.</param>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.Name">
            <summary>
            Gets or sets the name of a drive, such as C:\.
            </summary>
            <value>The name of the drive.</value>
            <remarks>
            This property is the name assigned to the drive, such as C:\ or E:\.
            </remarks>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.DriveType">
            <summary>
            Gets or sets the drive type, such as CD-ROM, removable, network, or fixed.
            </summary>
            <value>One of the enumeration values that specifies a drive type.</value>
            <remarks>
            The DriveType property indicates whether a drive is one of the following: CDRom, Fixed, Network, NoRootDirectory, Ram, Removable, or Unknown.
            These values are described in the DriveType enumeration.
            </remarks>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.DriveFormat">
            <summary>
            Gets or sets the name of the file system, such as NTFS or FAT32.
            </summary>
            <remarks>
            Use DriveFormat to determine what formatting a drive uses.
            </remarks>
            <value>The name of the file system on the specified drive.</value>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
            <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.IsReady">
            <summary>
            Gets or sets a value indicating whether a drive is ready.
            </summary>
            <value>
            <see langword="true" /> if the drive is ready; <see langword="false" /> if the drive is not ready.
            </value>
            <remarks>
            IsReady indicates whether a drive is ready.
            For example, it indicates whether a CD is in a CD drive or whether a removable storage device is ready for read/write operations.
            If you do not test whether a drive is ready, and it is not ready, querying the drive using <see cref="T:System.IO.Abstractions.DriveInfoBase" /> will raise an IOException.
            Do not rely on IsReady to avoid catching exceptions from other members such as TotalSize, TotalFreeSpace, and <see cref="P:System.IO.Abstractions.DriveInfoBase.DriveFormat" />.
            Between the time that your code checks IsReady and then accesses one of the other properties (even if the access occurs immediately after the check),
             a drive may have been disconnected or a disk may have been removed.
            </remarks>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.AvailableFreeSpace">
            <summary>
            Gets or sets the amount of available free space on a drive, in bytes.
            </summary>
            <value>The amount of free space available on the drive, in bytes.</value>
            <remarks>
            This property indicates the amount of free space available on the drive.
            Note that this number may be different from the TotalFreeSpace number because this property takes into account disk quotas.
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.TotalFreeSpace">
            <summary>
            Gets or sets the total amount of free space available on a drive, in bytes.
            </summary>
            <value>The total free space available on a drive, in bytes.</value>
            <remarks>This property indicates the total amount of free space available on the drive, not just what is available to the current user.</remarks>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
            <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.TotalSize">
            <summary>
            Gets or sets the total size of storage space on a drive, in bytes.
            </summary>
            <value>The total size of the drive, in bytes.</value>
            <remarks>
            This property indicates the total size of the drive in bytes, not just what is available to the current user.
            </remarks>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the access to the drive information is denied.</exception>
            <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.RootDirectory">
            <summary>
            Gets or sets the root directory of a drive.
            </summary>
            <value>An object that contains the root directory of the drive.</value>
        </member>
        <member name="P:System.IO.Abstractions.DriveInfoWrapper.VolumeLabel">
            <summary>
            Gets or sets the volume label of a drive.
            </summary>
            <value>The volume label.</value>
            <remarks>
            The label length is determined by the operating system. For example, NTFS allows a volume label to be up to 32 characters long. Note that <see langword="null" /> is a valid VolumeLabel.
            </remarks>
            <exception cref="T:System.IO.IOException">Thrown if an I/O error occurred (for example, a disk error or a drive was not ready).</exception>
            <exception cref="T:System.IO.DriveNotFoundException">Thrown if the drive does not exist or is not mapped.</exception>
            <exception cref="T:System.Security.SecurityException">Thrown if the caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Thrown if the volume label is being set on a network or CD-ROM drive
            -or-
            Access to the drive information is denied.
            </exception>
        </member>
        <member name="M:System.IO.Abstractions.DriveInfoWrapper.ToString">
            <summary>Returns a string that represents the current object.</summary><returns>A string that represents the current object.</returns>
        </member>
        <member name="T:System.IO.Abstractions.FileAclExtensions">
            <summary>
                ACL (access control list) extension methods for <see cref="T:System.IO.Abstractions.IFile" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileAclExtensions.GetAccessControl(System.IO.Abstractions.IFile,System.String)">
            <summary>Returns the security information of a file.</summary><returns>The security descriptors of all the access control sections of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileAclExtensions.GetAccessControl(System.IO.Abstractions.IFile,System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Returns the security information of a file.</summary><param name="includeSections">The desired access control sections to retrieve from the file.</param><returns>The security descriptors of the specified access control sections of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileAclExtensions.SetAccessControl(System.IO.Abstractions.IFile,System.String,System.Security.AccessControl.FileSecurity)">
            <summary>Changes the security attributes of an existing file.</summary><param name="fileSecurity">The security information to apply to the file.</param><exception cref="T:System.ArgumentNullException"><paramref name="fileSecurity" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:System.IO.Abstractions.FileBase">
            <summary>Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects.</summary>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>Asynchronously appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param><param name="contents">The lines to append to the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous append operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously appends lines to a file by using a specified encoding, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param><param name="contents">The lines to append to the file.</param><param name="encoding">The character encoding to use.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous append operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.AppendAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a file or creates a file if it does not already exist, appends the specified string to the file, and then closes the file.</summary><param name="path">The file to append the specified string to.</param><param name="contents">The string to append to the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous append operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.AppendAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a file or creates the file if it does not already exist, appends the specified string to the file using the specified encoding, and then closes the file.</summary><param name="path">The file to append the specified string to.</param><param name="contents">The string to append to the file.</param><param name="encoding">The character encoding to use.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous append operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous read operation, which wraps the byte array containing the contents of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a text file, reads all lines of the file, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous read operation, which wraps the string array containing all lines of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadAllLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a text file, reads all lines of the file with the specified encoding, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="encoding">The encoding applied to the contents of the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous read operation, which wraps the string array containing all lines of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadAllTextAsync(System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a text file, reads all the text in the file, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous read operation, which wraps the string containing all text in the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a text file, reads all text in the file with the specified encoding, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="encoding">The encoding applied to the contents of the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous read operation, which wraps the string containing all text in the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>Asynchronously creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to.</param><param name="bytes">The bytes to write to the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>Asynchronously creates a new file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to write to.</param><param name="contents">The lines to write to the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously creates a new file, write the specified lines to the file by using the specified encoding, and then closes the file.</summary><param name="path">The file to write to.</param><param name="contents">The lines to write to the file.</param><param name="encoding">The character encoding to use.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to.</param><param name="contents">The string to write to the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to.</param><param name="contents">The string to write to the file.</param><param name="encoding">The encoding to apply to the string.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.#ctor(System.IO.Abstractions.IFileSystem)">
            
        </member>
        <member name="P:System.IO.Abstractions.FileBase.FileSystem">
            <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param><param name="contents">The lines to append to the file.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" /> exceeds the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have permission to write to the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specifies a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> is a directory.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>Appends lines to a file by using a specified encoding, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param><param name="contents">The lines to append to the file.</param><param name="encoding">The character encoding to use.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">Either <paramref name="path" />, <paramref name="contents" />, or <paramref name="encoding" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" /> exceeds the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specifies a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> is a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.AppendAllText(System.String,System.String)">
            <summary>Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.</summary><param name="path">The file to append the specified string to.</param><param name="contents">The string to append to the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>Appends the specified string to the file using the specified encoding, creating the file if it does not already exist.</summary><param name="path">The file to append the specified string to.</param><param name="contents">The string to append to the file.</param><param name="encoding">The character encoding to use.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.AppendText(System.String)">
            <summary>Creates a <see cref="T:System.IO.StreamWriter" /> that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist.</summary><param name="path">The path to the file to append to.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A stream writer that appends UTF-8 encoded text to the specified file or to a new file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Copy(System.String,System.String)">
            <summary>Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</summary><param name="sourceFileName">The file to copy.</param><param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="sourceFileName" /> or <paramref name="destFileName" /> specifies a directory.</exception><exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName" /> was not found.</exception><exception cref="T:System.IO.IOException"><paramref name="destFileName" /> exists.  
  
 -or-  
  
 An I/O error has occurred.</exception><exception cref="T:System.NotSupportedException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Copy(System.String,System.String,System.Boolean)">
            <summary>Copies an existing file to a new file. Overwriting a file of the same name is allowed.</summary><param name="sourceFileName">The file to copy.</param><param name="destFileName">The name of the destination file. This cannot be a directory.</param><param name="overwrite"><see langword="true" /> if the destination file can be overwritten; otherwise, <see langword="false" />.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="destFileName" /> is read-only.
        
 -or-  
  
<paramref name="overwrite" /> is <see langword="true" />, <paramref name="destFileName" /> exists and is hidden, but <paramref name="sourceFileName" /> is not hidden.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="sourceFileName" /> or <paramref name="destFileName" /> specifies a directory.</exception><exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName" /> was not found.</exception><exception cref="T:System.IO.IOException"><paramref name="destFileName" /> exists and <paramref name="overwrite" /> is <see langword="false" />.  
  
 -or-  
  
 An I/O error has occurred.</exception><exception cref="T:System.NotSupportedException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Create(System.String)">
            <summary>Creates or overwrites a file in the specified path.</summary><param name="path">The path and name of the file to create.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="path" /> specified a file that is read-only.
        
 -or-  
  
 <paramref name="path" /> specified a file that is hidden.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.IO.FileStream" /> that provides read/write access to the file specified in <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Create(System.String,System.Int32)">
            <summary>Creates or overwrites a file in the specified path, specifying a buffer size.</summary><param name="path">The path and name of the file to create.</param><param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="path" /> specified a file that is read-only.
        
 -or-  
  
 <paramref name="path" /> specified a file that is hidden.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.IO.FileStream" /> with the specified buffer size that provides read/write access to the file specified in <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Create(System.String,System.Int32,System.IO.FileOptions)">
            <summary>Creates or overwrites a file in the specified path, specifying a buffer size and options that describe how to create or overwrite the file.</summary><param name="path">The path and name of the file to create.</param><param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param><param name="options">One of the <see cref="T:System.IO.FileOptions" /> values that describes how to create or overwrite the file.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="path" /> specified a file that is read-only.
        
 -or-  
  
 <paramref name="path" /> specified a file that is hidden.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A new file with the specified buffer size.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.CreateSymbolicLink(System.String,System.String)">
            <summary>Creates a file symbolic link identified by <paramref name="path" /> that points to <paramref name="pathToTarget" />.</summary><param name="path">The path where the symbolic link should be created.</param><param name="pathToTarget">The path of the target to which the symbolic link points.</param><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="pathToTarget" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> or <paramref name="pathToTarget" /> is empty.

-or-

<paramref name="path" /> or <paramref name="pathToTarget" /> contains a <see langword="null" /> character.</exception><exception cref="T:System.IO.IOException">A file or directory already exists in the location of <paramref name="path" />.

-or-

An I/O error occurred.</exception><returns>A <see cref="T:System.IO.FileInfo" /> instance that wraps the newly created file symbolic link.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.CreateText(System.String)">
            <summary>Creates or opens a file for writing UTF-8 encoded text. If the file already exists, its contents are overwritten.</summary><param name="path">The file to be opened for writing.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="path" /> specified a file that is read-only.
        
 -or-  
  
 <paramref name="path" /> specified a file that is hidden.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.IO.StreamWriter" /> that writes to the specified file using UTF-8 encoding.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Decrypt(System.String)">
            <summary>Decrypts a file that was encrypted by the current account using the <see cref="M:System.IO.File.Encrypt(System.String)" /> method.</summary><param name="path">A path that describes a file to decrypt.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: The <paramref name="path" /> parameter is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the <paramref name="path" /> parameter could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. For example, the encrypted file is already open.  
  
 -or-  
  
 This operation is not supported on the current platform.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="path" /> parameter specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 The <paramref name="path" /> parameter specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Delete(System.String)">
            <summary>Deletes the specified file.</summary><param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">The specified file is in use.  
  
 -or-  
  
 There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
  
 -or-  
  
 The file is an executable file that is in use.  
  
 -or-  
  
 <paramref name="path" /> is a directory.  
  
 -or-  
  
 <paramref name="path" /> specified a read-only file.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Encrypt(System.String)">
            <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary><param name="path">A path that describes a file to encrypt.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: The <paramref name="path" /> parameter is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the <paramref name="path" /> parameter could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.  
  
 -or-  
  
 This operation is not supported on the current platform.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="path" /> parameter specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 The <paramref name="path" /> parameter specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Exists(System.String)">
            <summary>Determines whether the specified file exists.</summary><param name="path">The file to check.</param><returns><see langword="true" /> if the caller has the required permissions and <paramref name="path" /> contains the name of an existing file; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="path" /> is <see langword="null" />, an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns <see langword="false" /> regardless of the existence of <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.GetAttributes(System.String)">
            <summary>Gets the <see cref="T:System.IO.FileAttributes" /> of the file on the path.</summary><param name="path">The path to the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="path" /> represents a file and is invalid, such as being on an unmapped drive, or the file cannot be found.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> represents a directory and is invalid, such as being on an unmapped drive, or the directory cannot be found.</exception><exception cref="T:System.IO.IOException">This file is being used by another process.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>The <see cref="T:System.IO.FileAttributes" /> of the file on the path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.GetCreationTime(System.String)">
            <summary>Returns the creation date and time of the specified file or directory.</summary><param name="path">The file or directory for which to obtain creation date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.DateTime" /> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.GetCreationTimeUtc(System.String)">
            <summary>Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.</summary><param name="path">The file or directory for which to obtain creation date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.DateTime" /> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.GetLastAccessTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to obtain access date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.GetLastAccessTimeUtc(System.String)">
            <summary>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to obtain access date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.GetLastWriteTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last written to.</summary><param name="path">The file or directory for which to obtain write date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.GetLastWriteTimeUtc(System.String)">
            <summary>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.</summary><param name="path">The file or directory for which to obtain write date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last written to. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Move(System.String,System.String)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary><param name="sourceFileName">The name of the file to move. Can include a relative or absolute path.</param><param name="destFileName">The new path and name for the file.</param><exception cref="T:System.IO.IOException"><paramref name="destFileName" /> already exists.

          -or-

          An I/O error has occurred, e.g. while copying the file across disk volumes.</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName" /> was not found.</exception><exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Move(System.String,System.String,System.Boolean)">
            <summary>Moves a specified file to a new location, providing the options to specify a new file name and to overwrite the destination file if it already exists.</summary><param name="sourceFileName">The name of the file to move. Can include a relative or absolute path.</param><param name="destFileName">The new path and name for the file.</param><param name="overwrite"><see langword="true" /> to overwrite the destination file if it already exists; <see langword="false" /> otherwise.</param><exception cref="T:System.IO.IOException"><paramref name="destFileName" /> already exists and <paramref name="overwrite" /> is <see langword="false" />.

          -or-

          An I/O error has occurred, e.g. while copying the file across disk volumes.</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName" /> was not found.</exception><exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Open(System.String,System.IO.FileMode)">
            <summary>Opens a <see cref="T:System.IO.FileStream" /> on the specified path with read/write access with no sharing.</summary><param name="path">The file to open.</param><param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" /> and the specified file is a hidden file.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> specified an invalid value.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.IO.FileStream" /> opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>Opens a <see cref="T:System.IO.FileStream" /> on the specified path, with the specified mode and access with no sharing.</summary><param name="path">The file to open.</param><param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param><param name="access">A <see cref="T:System.IO.FileAccess" /> value that specifies the operations that can be performed on the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="access" /> specified <see langword="Read" /> and <paramref name="mode" /> specified <see langword="Create" />, <see langword="CreateNew" />, <see langword="Truncate" />, or <see langword="Append" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only and <paramref name="access" /> is not <see langword="Read" />.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" /> and the specified file is a hidden file.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> or <paramref name="access" /> specified an invalid value.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>An unshared <see cref="T:System.IO.FileStream" /> that provides access to the specified file, with the specified mode and access.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Opens a <see cref="T:System.IO.FileStream" /> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary><param name="path">The file to open.</param><param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param><param name="access">A <see cref="T:System.IO.FileAccess" /> value that specifies the operations that can be performed on the file.</param><param name="share">A <see cref="T:System.IO.FileShare" /> value specifying the type of access other threads have to the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="access" /> specified <see langword="Read" /> and <paramref name="mode" /> specified <see langword="Create" />, <see langword="CreateNew" />, <see langword="Truncate" />, or <see langword="Append" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only and <paramref name="access" /> is not <see langword="Read" />.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" /> and the specified file is a hidden file.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> specified an invalid value.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.IO.FileStream" /> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Open(System.String,System.IO.FileStreamOptions)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, additional file options and the allocation size.</summary><param name="path">The path of the file to open.</param><param name="options">An object that describes optional <see cref="T:System.IO.FileStream" /> parameters to use.</param><returns>A <see cref="T:System.IO.FileStream" /> instance that wraps the opened file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.OpenRead(System.String)">
            <summary>Opens an existing file for reading.</summary><param name="path">The file to be opened for reading.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><returns>A read-only <see cref="T:System.IO.FileStream" /> on the specified path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.OpenText(System.String)">
            <summary>Opens an existing UTF-8 encoded text file for reading.</summary><param name="path">The file to be opened for reading.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.IO.StreamReader" /> on the specified path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.OpenWrite(System.String)">
            <summary>Opens an existing file or creates a new file for writing.</summary><param name="path">The file to be opened for writing.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="path" /> specified a read-only file or directory.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>An unshared <see cref="T:System.IO.FileStream" /> object on the specified path with <see cref="F:System.IO.FileAccess.Write" /> access.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadAllBytes(System.String)">
            <summary>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary><param name="path">The file to open for reading.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadAllLines(System.String)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary><param name="path">The file to open for reading.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="encoding">The encoding applied to the contents of the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadAllText(System.String)">
            <summary>Opens a text file, reads all the text in the file, and then closes the file.</summary><param name="path">The file to open for reading.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A string containing all the text in the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadAllText(System.String,System.Text.Encoding)">
            <summary>Opens a file, reads all text in the file with the specified encoding, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="encoding">The encoding applied to the contents of the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A string containing all text in the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadLines(System.String)">
            <summary>Reads the lines of a file.</summary><param name="path">The file to read.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" /> exceeds the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specifies a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> is a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ReadLines(System.String,System.Text.Encoding)">
            <summary>Read the lines of a file that has a specified encoding.</summary><param name="path">The file to read.</param><param name="encoding">The encoding that is applied to the contents of the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" /> exceeds the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specifies a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> is a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Replace(System.String,System.String,System.String)">
            <summary>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file.</summary><param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName" />.</param><param name="destinationFileName">The name of the file being replaced.</param><param name="destinationBackupFileName">The name of the backup file.</param><exception cref="T:System.ArgumentException">The path described by the <paramref name="destinationFileName" /> parameter was not of a legal form.  
  
 -or-  
  
 The path described by the <paramref name="destinationBackupFileName" /> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destinationFileName" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.  
  
 -or-  
  
 The file described by the <paramref name="destinationBackupFileName" /> parameter could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.  
  
-or-
  
 The <paramref name="sourceFileName" /> and <paramref name="destinationFileName" /> parameters specify the same file.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="sourceFileName" /> or <paramref name="destinationFileName" /> parameter specifies a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 Source or destination parameters specify a directory instead of a file.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file and optionally ignores merge errors.</summary><param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName" />.</param><param name="destinationFileName">The name of the file being replaced.</param><param name="destinationBackupFileName">The name of the backup file.</param><param name="ignoreMetadataErrors"><see langword="true" /> to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, <see langword="false" />.</param><exception cref="T:System.ArgumentException">The path described by the <paramref name="destinationFileName" /> parameter was not of a legal form.  
  
 -or-  
  
 The path described by the <paramref name="destinationBackupFileName" /> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destinationFileName" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.  
  
 -or-  
  
 The file described by the <paramref name="destinationBackupFileName" /> parameter could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.  
  
-or-
  
 The <paramref name="sourceFileName" /> and <paramref name="destinationFileName" /> parameters specify the same file.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="sourceFileName" /> or <paramref name="destinationFileName" /> parameter specifies a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 Source or destination parameters specify a directory instead of a file.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.ResolveLinkTarget(System.String,System.Boolean)">
            <summary>Gets the target of the specified file link.</summary><param name="linkPath">The path of the file link.</param><param name="returnFinalTarget"><see langword="true" /> to follow links to the final target; <see langword="false" /> to return the immediate next link.</param><exception cref="T:System.IO.IOException">The file on <paramref name="linkPath" /> does not exist.

-or-

There are too many levels of symbolic links.</exception><returns>A <see cref="T:System.IO.FileInfo" /> instance if <paramref name="linkPath" /> exists, independently if the target exists or not. <see langword="null" /> if <paramref name="linkPath" /> is not a link.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>Sets the specified <see cref="T:System.IO.FileAttributes" /> of the file on the specified path.</summary><param name="path">The path to the file.</param><param name="fileAttributes">A bitwise combination of the enumeration values.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the date and time the file was created.</summary><param name="path">The file for which to set the creation date and time information.</param><param name="creationTime">A <see cref="T:System.DateTime" /> containing the value to set for the creation date and time of <paramref name="path" />. This value is expressed in local time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while performing the operation.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> specifies a value outside the range of dates, times, or both permitted for this operation.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary><param name="path">The file for which to set the creation date and time information.</param><param name="creationTimeUtc">A <see cref="T:System.DateTime" /> containing the value to set for the creation date and time of <paramref name="path" />. This value is expressed in UTC time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while performing the operation.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> specifies a value outside the range of dates, times, or both permitted for this operation.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.SetLastAccessTime(System.String,System.DateTime)">
            <summary>Sets the date and time the specified file was last accessed.</summary><param name="path">The file for which to set the access date and time information.</param><param name="lastAccessTime">A <see cref="T:System.DateTime" /> containing the value to set for the last access date and time of <paramref name="path" />. This value is expressed in local time.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary><param name="path">The file for which to set the access date and time information.</param><param name="lastAccessTimeUtc">A <see cref="T:System.DateTime" /> containing the value to set for the last access date and time of <paramref name="path" />. This value is expressed in UTC time.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Sets the date and time that the specified file was last written to.</summary><param name="path">The file for which to set the date and time information.</param><param name="lastWriteTime">A <see cref="T:System.DateTime" /> containing the value to set for the last write date and time of <paramref name="path" />. This value is expressed in local time.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.</summary><param name="path">The file for which to set the date and time information.</param><param name="lastWriteTimeUtc">A <see cref="T:System.DateTime" /> containing the value to set for the last write date and time of <paramref name="path" />. This value is expressed in UTC time.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllBytes(System.String,System.Byte[])">
            <summary>Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to.</param><param name="bytes">The bytes to write to the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" /> or the byte array is empty.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.
        
 -or-  
  
 <paramref name="path" /> specified a file that is hidden.
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Creates a new file, writes a collection of strings to the file, and then closes the file.</summary><param name="path">The file to write to.</param><param name="contents">The lines to write to the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" /> exceeds the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.
        
 -or-  
  
 <paramref name="path" /> specified a file that is hidden.
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> is a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.</summary><param name="path">The file to write to.</param><param name="contents">The lines to write to the file.</param><param name="encoding">The character encoding to use.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">Either <paramref name="path" />, <paramref name="contents" />, or <paramref name="encoding" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" /> exceeds the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.
        
 -or-  
  
 <paramref name="path" /> specified a file that is hidden.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> is a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.String[])">
            <summary>Creates a new file, write the specified string array to the file, and then closes the file.</summary><param name="path">The file to write to.</param><param name="contents">The string array to write to the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.
        
 -or-  
  
 <paramref name="path" /> specified a file that is hidden.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.</summary><param name="path">The file to write to.</param><param name="contents">The string array to write to the file.</param><param name="encoding">An <see cref="T:System.Text.Encoding" /> object that represents the character encoding applied to the string array.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.
        
 -or-  
  
 <paramref name="path" /> specified a file that is hidden.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllText(System.String,System.String)">
            <summary>Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to.</param><param name="contents">The string to write to the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.
        
 -or-  
  
 <paramref name="path" /> specified a file that is hidden.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileBase.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to.</param><param name="contents">The string to write to the file.</param><param name="encoding">The encoding to apply to the string.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.
        
 -or-  
  
 <paramref name="path" /> specified a file that is hidden.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="T:System.IO.Abstractions.FileInfoAclExtensions">
            <summary>
                ACL (access control list) extension methods for <see cref="T:System.IO.Abstractions.IFileInfo" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoAclExtensions.GetAccessControl(System.IO.Abstractions.IFileInfo)">
            <summary>Returns the security information of a file.</summary><param name="fileInfo">The file from which to obtain the security information.</param><returns>The security descriptors of all the access control sections of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoAclExtensions.GetAccessControl(System.IO.Abstractions.IFileInfo,System.Security.AccessControl.AccessControlSections)">
            <summary>Returns the security information of a file.</summary><param name="fileInfo">An existing file from which to obtain the security information.</param><param name="includeSections">The desired access control sections to retrieve from the file.</param><returns>The security descriptors of the specified access control sections of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoAclExtensions.SetAccessControl(System.IO.Abstractions.IFileInfo,System.Security.AccessControl.FileSecurity)">
            <summary>Changes the security attributes of an existing file.</summary><param name="fileInfo">An existing file.</param><param name="fileSecurity">The security information to apply to the file.</param><exception cref="T:System.ArgumentNullException"><paramref name="fileSecurity" /> is <see langword="null" />.</exception>
        </member>
        <member name="T:System.IO.Abstractions.FileInfoBase">
            <summary>Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.AppendText">
            <summary>Creates a <see cref="T:System.IO.StreamWriter" /> that appends text to the file represented by this instance of the <see cref="T:System.IO.FileInfo" />.</summary><returns>A new <see langword="StreamWriter" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.CopyTo(System.String)">
            <summary>Copies an existing file to a new file, disallowing the overwriting of an existing file.</summary><param name="destFileName">The name of the new file to copy to.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="destFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception><exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentNullException"><paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName" /> does not exist.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="destFileName" /> contains a colon (:) within the string but does not specify the volume.</exception><returns>A new file with a fully qualified path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.CopyTo(System.String,System.Boolean)">
            <summary>Copies an existing file to a new file, allowing the overwriting of an existing file.</summary><param name="destFileName">The name of the new file to copy to.</param><param name="overwrite"><see langword="true" /> to allow an existing file to be overwritten; otherwise, <see langword="false" />.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="destFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception><exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists and <paramref name="overwrite" /> is <see langword="false" />.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentNullException"><paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName" /> does not exist.</exception><exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="destFileName" /> contains a colon (:) in the middle of the string.</exception><returns>A new file, or an overwrite of an existing file if <paramref name="overwrite" /> is <see langword="true" />. If the file exists and <paramref name="overwrite" /> is <see langword="false" />, an <see cref="T:System.IO.IOException" /> is thrown.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Create">
            <summary>Creates a file.</summary><returns>A new file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.CreateText">
            <summary>Creates a <see cref="T:System.IO.StreamWriter" /> that writes a new text file.</summary><exception cref="T:System.UnauthorizedAccessException">The file name is a directory.</exception><exception cref="T:System.IO.IOException">The disk is read-only.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A new <see langword="StreamWriter" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Decrypt">
            <summary>Decrypts a file that was encrypted by the current account using the <see cref="M:System.IO.FileInfo.Encrypt" /> method.</summary><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo" /> object is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Encrypt">
            <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo" /> object is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.MoveTo(System.String)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary><param name="destFileName">The path to move the file to, which can specify a different file name.</param><exception cref="T:System.IO.IOException">An I/O error occurs, such as the destination file already exists or the destination device is not ready.</exception><exception cref="T:System.ArgumentNullException"><paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="destFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="destFileName" /> is read-only or is a directory.</exception><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="destFileName" /> contains a colon (:) in the middle of the string.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.MoveTo(System.String,System.Boolean)">
            <summary>Moves a specified file to a new location, providing the options to specify a new file name and to overwrite the destination file if it already exists.</summary><param name="destFileName">The path to move the file to, which can specify a different file name.</param><param name="overwrite"><see langword="true" /> to overwrite the destination file if it already exists; <see langword="false" /> otherwise.</param><exception cref="T:System.IO.IOException">An I/O error occurred, such as the destination device is not ready.</exception><exception cref="T:System.ArgumentNullException"><paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="destFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="destFileName" /> is read-only or is a directory.</exception><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="destFileName" /> contains a colon (:) in the middle of the string.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Open(System.IO.FileMode)">
            <summary>Opens a file in the specified mode.</summary><param name="mode">A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, <see langword="Open" /> or <see langword="Append" />) in which to open the file.</param><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.UnauthorizedAccessException">The file is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.IOException">The file is already open.</exception><returns>A file opened in the specified mode, with read/write access and unshared.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>Opens a file in the specified mode with read, write, or read/write access.</summary><param name="mode">A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, <see langword="Open" /> or <see langword="Append" />) in which to open the file.</param><param name="access">A <see cref="T:System.IO.FileAccess" /> constant specifying whether to open the file with <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" /> file access.</param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.UnauthorizedAccessException"><see cref="P:System.IO.FileInfo.Name" /> is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.IOException">The file is already open.</exception><exception cref="T:System.ArgumentException"><see cref="P:System.IO.FileInfo.Name" /> is empty or contains only white spaces.</exception><exception cref="T:System.ArgumentNullException">One or more arguments is null.</exception><returns>A <see cref="T:System.IO.FileStream" /> object opened in the specified mode and access, and unshared.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</summary><param name="mode">A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, <see langword="Open" /> or <see langword="Append" />) in which to open the file.</param><param name="access">A <see cref="T:System.IO.FileAccess" /> constant specifying whether to open the file with <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" /> file access.</param><param name="share">A <see cref="T:System.IO.FileShare" /> constant specifying the type of access other <see langword="FileStream" /> objects have to this file.</param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.UnauthorizedAccessException"><see cref="P:System.IO.FileInfo.Name" /> is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.IOException">The file is already open.</exception><exception cref="T:System.ArgumentException"><see cref="P:System.IO.FileInfo.Name" /> is empty or contains only white spaces.</exception><exception cref="T:System.ArgumentNullException">One or more arguments is null.</exception><returns>A <see cref="T:System.IO.FileStream" /> object opened with the specified mode, access, and sharing options.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Open(System.IO.FileStreamOptions)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, additional file options and the allocation size.</summary><param name="options">An object that describes optional <see cref="T:System.IO.FileStream" /> parameters to use.</param><returns>A <see cref="T:System.IO.FileStream" /> that wraps the opened file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.OpenRead">
            <summary>Creates a read-only <see cref="T:System.IO.FileStream" />.</summary><exception cref="T:System.UnauthorizedAccessException"><see cref="P:System.IO.FileInfo.Name" /> is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.IOException">The file is already open.</exception><returns>A new read-only <see cref="T:System.IO.FileStream" /> object.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.OpenText">
            <summary>Creates a <see cref="T:System.IO.StreamReader" /> with UTF8 encoding that reads from an existing text file.</summary><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.UnauthorizedAccessException"><see cref="P:System.IO.FileInfo.Name" /> is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><returns>A new <see langword="StreamReader" /> with UTF8 encoding.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.OpenWrite">
            <summary>Creates a write-only <see cref="T:System.IO.FileStream" />.</summary><exception cref="T:System.UnauthorizedAccessException">The path specified when creating an instance of the <see cref="T:System.IO.FileInfo" /> object is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified when creating an instance of the <see cref="T:System.IO.FileInfo" /> object is invalid, such as being on an unmapped drive.</exception><returns>A write-only unshared <see cref="T:System.IO.FileStream" /> object for a new or existing file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Replace(System.String,System.String)">
            <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo" /> object, deleting the original file, and creating a backup of the replaced file.</summary><param name="destinationFileName">The name of a file to replace with the current file.</param><param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destFileName" /> parameter.</param><exception cref="T:System.ArgumentException">The path described by the <paramref name="destFileName" /> parameter was not of a legal form.  
  
 -or-  
  
 The path described by the <paramref name="destBackupFileName" /> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destFileName" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.  
  
 -or-  
  
 The file described by the <paramref name="destinationFileName" /> parameter could not be found.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><returns>A <see cref="T:System.IO.FileInfo" /> object that encapsulates information about the file described by the <paramref name="destFileName" /> parameter.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.Replace(System.String,System.String,System.Boolean)">
            <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo" /> object, deleting the original file, and creating a backup of the replaced file.  Also specifies whether to ignore merge errors.</summary><param name="destinationFileName">The name of a file to replace with the current file.</param><param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destFileName" /> parameter.</param><param name="ignoreMetadataErrors"><see langword="true" /> to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise <see langword="false" />.</param><exception cref="T:System.ArgumentException">The path described by the <paramref name="destFileName" /> parameter was not of a legal form.  
  
 -or-  
  
 The path described by the <paramref name="destBackupFileName" /> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destFileName" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.  
  
 -or-  
  
 The file described by the <paramref name="destinationFileName" /> parameter could not be found.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><returns>A <see cref="T:System.IO.FileInfo" /> object that encapsulates information about the file described by the <paramref name="destFileName" /> parameter.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoBase.Directory">
            <summary>Gets an instance of the parent directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A <see cref="T:System.IO.DirectoryInfo" /> object representing the parent directory of this file.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoBase.DirectoryName">
            <summary>Gets a string representing the directory's full path.</summary><exception cref="T:System.ArgumentNullException"><see langword="null" /> was passed in for the directory name.</exception><exception cref="T:System.IO.PathTooLongException">The fully qualified path name exceeds the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A string representing the directory's full path.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoBase.IsReadOnly">
            <summary>Gets or sets a value that determines if the current file is read only.</summary><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">The user does not have write permission, but attempted to set this property to <see langword="false" />.</exception><returns><see langword="true" /> if the current file is read only; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoBase.Length">
            <summary>Gets the size, in bytes, of the current file.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot update the state of the file or directory.</exception><exception cref="T:System.IO.FileNotFoundException">The file does not exist.  
  
 -or-  
  
 The <see langword="Length" /> property is called for a directory.</exception><returns>The size of the current file in bytes.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoBase.op_Implicit(System.IO.FileInfo)~System.IO.Abstractions.FileInfoBase">
            <inheritdoc />
        </member>
        <member name="T:System.IO.Abstractions.FileInfoWrapper">
            <summary>Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.#ctor(System.IO.Abstractions.IFileSystem,System.IO.FileInfo)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.CreateAsSymbolicLink(System.String)">
            <summary>Creates a symbolic link located in <see cref="P:System.IO.FileSystemInfo.FullName" /> that points to the specified <paramref name="pathToTarget" />.</summary><param name="pathToTarget">The path of the symbolic link target.</param><exception cref="T:System.ArgumentNullException"><paramref name="pathToTarget" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="pathToTarget" /> is empty.

-or-

<paramref name="pathToTarget" /> contains invalid path characters.</exception><exception cref="T:System.IO.IOException">A file or directory already exists in the location of <see cref="P:System.IO.FileSystemInfo.FullName" />.

-or-

An I/O error occurred.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Delete">
            <summary>Deletes a file or directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception><exception cref="T:System.IO.IOException">There is an open handle on the file or directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Refresh">
            <summary>Refreshes the state of the object.</summary><exception cref="T:System.IO.IOException">A device such as a disk drive is not ready.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.ResolveLinkTarget(System.Boolean)">
            <summary>Gets the target of the specified link.</summary><param name="returnFinalTarget"><see langword="true" /> to follow links to the final target; <see langword="false" /> to return the immediate next link.</param><exception cref="T:System.IO.IOException">The file or directory does not exist.

-or-

There are too many levels of symbolic links.</exception><returns>A <see cref="T:System.IO.FileSystemInfo" /> instance if the link exists, independently if the target exists or not; <see langword="null" /> if this file or directory is not a link.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.Attributes">
            <summary>Gets or sets the attributes for the current file or directory.</summary><exception cref="T:System.IO.FileNotFoundException">The specified file doesn't exist. Only thrown when setting the property value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid. For example, it's on an unmapped drive. Only thrown when setting the property value.</exception><exception cref="T:System.Security.SecurityException">The caller doesn't have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">.NET Core and .NET 5+ only: The user attempts to set an attribute value but doesn't have write permission.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.ArgumentException">The caller attempts to set an invalid file attribute.  
  
 -or-  
  
 .NET Framework only: The user attempts to set an attribute value but doesn't have write permission.</exception><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><returns><see cref="T:System.IO.FileAttributes" /> of the current <see cref="T:System.IO.FileSystemInfo" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.CreationTime">
            <summary>Gets or sets the creation time of the current file or directory.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid creation time.</exception><returns>The creation date and time of the current <see cref="T:System.IO.FileSystemInfo" /> object.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.CreationTimeUtc">
            <summary>Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception><returns>The creation date and time in UTC format of the current <see cref="T:System.IO.FileSystemInfo" /> object.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.Exists">
            <summary>Gets a value indicating whether the file or directory exists.</summary><returns><see langword="true" /> if the file or directory exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.Extension">
            <summary>Gets the extension part of the file name, including the leading dot <c>.</c> even if it is the entire file name, or an empty string if no extension is present.</summary><returns>A string containing the <see cref="T:System.IO.FileSystemInfo" /> extension.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.FullName">
            <summary>Gets the full path of the directory or file.</summary><exception cref="T:System.IO.PathTooLongException">The fully qualified path and file name exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A string containing the full path.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.LastAccessTime">
            <summary>Gets or sets the time the current file or directory was last accessed.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time</exception><returns>The time that the current file or directory was last accessed.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.LastAccessTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception><returns>The UTC time that the current file or directory was last accessed.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.LastWriteTime">
            <summary>Gets or sets the time when the current file or directory was last written to.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception><returns>The time the current file was last written.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.LastWriteTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception><returns>The UTC time when the current file was last written to.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.LinkTarget">
            <summary>If this <see cref="T:System.IO.FileSystemInfo" /> instance represents a link, returns the link target's path.
            If a link does not exist in <see cref="P:System.IO.FileSystemInfo.FullName" />, or this instance does not represent a link, returns <see langword="null" />.</summary>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.Name">
            <summary>For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the <see langword="Name" /> property gets the name of the directory.</summary><returns>A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.AppendText">
            <summary>Creates a <see cref="T:System.IO.StreamWriter" /> that appends text to the file represented by this instance of the <see cref="T:System.IO.FileInfo" />.</summary><returns>A new <see langword="StreamWriter" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.CopyTo(System.String)">
            <summary>Copies an existing file to a new file, disallowing the overwriting of an existing file.</summary><param name="destFileName">The name of the new file to copy to.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="destFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception><exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentNullException"><paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName" /> does not exist.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="destFileName" /> contains a colon (:) within the string but does not specify the volume.</exception><returns>A new file with a fully qualified path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.CopyTo(System.String,System.Boolean)">
            <summary>Copies an existing file to a new file, allowing the overwriting of an existing file.</summary><param name="destFileName">The name of the new file to copy to.</param><param name="overwrite"><see langword="true" /> to allow an existing file to be overwritten; otherwise, <see langword="false" />.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="destFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception><exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists and <paramref name="overwrite" /> is <see langword="false" />.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentNullException"><paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The directory specified in <paramref name="destFileName" /> does not exist.</exception><exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="destFileName" /> contains a colon (:) in the middle of the string.</exception><returns>A new file, or an overwrite of an existing file if <paramref name="overwrite" /> is <see langword="true" />. If the file exists and <paramref name="overwrite" /> is <see langword="false" />, an <see cref="T:System.IO.IOException" /> is thrown.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Create">
            <summary>Creates a file.</summary><returns>A new file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.CreateText">
            <summary>Creates a <see cref="T:System.IO.StreamWriter" /> that writes a new text file.</summary><exception cref="T:System.UnauthorizedAccessException">The file name is a directory.</exception><exception cref="T:System.IO.IOException">The disk is read-only.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A new <see langword="StreamWriter" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Decrypt">
            <summary>Decrypts a file that was encrypted by the current account using the <see cref="M:System.IO.FileInfo.Encrypt" /> method.</summary><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo" /> object is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Encrypt">
            <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo" /> object is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.MoveTo(System.String)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary><param name="destFileName">The path to move the file to, which can specify a different file name.</param><exception cref="T:System.IO.IOException">An I/O error occurs, such as the destination file already exists or the destination device is not ready.</exception><exception cref="T:System.ArgumentNullException"><paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="destFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="destFileName" /> is read-only or is a directory.</exception><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="destFileName" /> contains a colon (:) in the middle of the string.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.MoveTo(System.String,System.Boolean)">
            <summary>Moves a specified file to a new location, providing the options to specify a new file name and to overwrite the destination file if it already exists.</summary><param name="destFileName">The path to move the file to, which can specify a different file name.</param><param name="overwrite"><see langword="true" /> to overwrite the destination file if it already exists; <see langword="false" /> otherwise.</param><exception cref="T:System.IO.IOException">An I/O error occurred, such as the destination device is not ready.</exception><exception cref="T:System.ArgumentNullException"><paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="destFileName" /> is empty, contains only white spaces, or contains invalid characters.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="destFileName" /> is read-only or is a directory.</exception><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="destFileName" /> contains a colon (:) in the middle of the string.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Open(System.IO.FileMode)">
            <summary>Opens a file in the specified mode.</summary><param name="mode">A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, <see langword="Open" /> or <see langword="Append" />) in which to open the file.</param><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.UnauthorizedAccessException">The file is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.IOException">The file is already open.</exception><returns>A file opened in the specified mode, with read/write access and unshared.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>Opens a file in the specified mode with read, write, or read/write access.</summary><param name="mode">A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, <see langword="Open" /> or <see langword="Append" />) in which to open the file.</param><param name="access">A <see cref="T:System.IO.FileAccess" /> constant specifying whether to open the file with <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" /> file access.</param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.UnauthorizedAccessException"><see cref="P:System.IO.FileInfo.Name" /> is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.IOException">The file is already open.</exception><exception cref="T:System.ArgumentException"><see cref="P:System.IO.FileInfo.Name" /> is empty or contains only white spaces.</exception><exception cref="T:System.ArgumentNullException">One or more arguments is null.</exception><returns>A <see cref="T:System.IO.FileStream" /> object opened in the specified mode and access, and unshared.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</summary><param name="mode">A <see cref="T:System.IO.FileMode" /> constant specifying the mode (for example, <see langword="Open" /> or <see langword="Append" />) in which to open the file.</param><param name="access">A <see cref="T:System.IO.FileAccess" /> constant specifying whether to open the file with <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" /> file access.</param><param name="share">A <see cref="T:System.IO.FileShare" /> constant specifying the type of access other <see langword="FileStream" /> objects have to this file.</param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.UnauthorizedAccessException"><see cref="P:System.IO.FileInfo.Name" /> is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.IOException">The file is already open.</exception><exception cref="T:System.ArgumentException"><see cref="P:System.IO.FileInfo.Name" /> is empty or contains only white spaces.</exception><exception cref="T:System.ArgumentNullException">One or more arguments is null.</exception><returns>A <see cref="T:System.IO.FileStream" /> object opened with the specified mode, access, and sharing options.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Open(System.IO.FileStreamOptions)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, additional file options and the allocation size.</summary><param name="options">An object that describes optional <see cref="T:System.IO.FileStream" /> parameters to use.</param><returns>A <see cref="T:System.IO.FileStream" /> that wraps the opened file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.OpenRead">
            <summary>Creates a read-only <see cref="T:System.IO.FileStream" />.</summary><exception cref="T:System.UnauthorizedAccessException"><see cref="P:System.IO.FileInfo.Name" /> is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.IO.IOException">The file is already open.</exception><returns>A new read-only <see cref="T:System.IO.FileStream" /> object.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.OpenText">
            <summary>Creates a <see cref="T:System.IO.StreamReader" /> with UTF8 encoding that reads from an existing text file.</summary><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file is not found.</exception><exception cref="T:System.UnauthorizedAccessException"><see cref="P:System.IO.FileInfo.Name" /> is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><returns>A new <see langword="StreamReader" /> with UTF8 encoding.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.OpenWrite">
            <summary>Creates a write-only <see cref="T:System.IO.FileStream" />.</summary><exception cref="T:System.UnauthorizedAccessException">The path specified when creating an instance of the <see cref="T:System.IO.FileInfo" /> object is read-only or is a directory.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified when creating an instance of the <see cref="T:System.IO.FileInfo" /> object is invalid, such as being on an unmapped drive.</exception><returns>A write-only unshared <see cref="T:System.IO.FileStream" /> object for a new or existing file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Replace(System.String,System.String)">
            <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo" /> object, deleting the original file, and creating a backup of the replaced file.</summary><param name="destinationFileName">The name of a file to replace with the current file.</param><param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destFileName" /> parameter.</param><exception cref="T:System.ArgumentException">The path described by the <paramref name="destFileName" /> parameter was not of a legal form.  
  
 -or-  
  
 The path described by the <paramref name="destBackupFileName" /> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destFileName" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.  
  
 -or-  
  
 The file described by the <paramref name="destinationFileName" /> parameter could not be found.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><returns>A <see cref="T:System.IO.FileInfo" /> object that encapsulates information about the file described by the <paramref name="destFileName" /> parameter.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.Replace(System.String,System.String,System.Boolean)">
            <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo" /> object, deleting the original file, and creating a backup of the replaced file.  Also specifies whether to ignore merge errors.</summary><param name="destinationFileName">The name of a file to replace with the current file.</param><param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the <paramref name="destFileName" /> parameter.</param><param name="ignoreMetadataErrors"><see langword="true" /> to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise <see langword="false" />.</param><exception cref="T:System.ArgumentException">The path described by the <paramref name="destFileName" /> parameter was not of a legal form.  
  
 -or-  
  
 The path described by the <paramref name="destBackupFileName" /> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destFileName" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.  
  
 -or-  
  
 The file described by the <paramref name="destinationFileName" /> parameter could not be found.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><returns>A <see cref="T:System.IO.FileInfo" /> object that encapsulates information about the file described by the <paramref name="destFileName" /> parameter.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.Directory">
            <summary>Gets an instance of the parent directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A <see cref="T:System.IO.DirectoryInfo" /> object representing the parent directory of this file.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.DirectoryName">
            <summary>Gets a string representing the directory's full path.</summary><exception cref="T:System.ArgumentNullException"><see langword="null" /> was passed in for the directory name.</exception><exception cref="T:System.IO.PathTooLongException">The fully qualified path name exceeds the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A string representing the directory's full path.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.IsReadOnly">
            <summary>Gets or sets a value that determines if the current file is read only.</summary><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">The user does not have write permission, but attempted to set this property to <see langword="false" />.</exception><returns><see langword="true" /> if the current file is read only; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileInfoWrapper.Length">
            <summary>Gets the size, in bytes, of the current file.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot update the state of the file or directory.</exception><exception cref="T:System.IO.FileNotFoundException">The file does not exist.  
  
 -or-  
  
 The <see langword="Length" /> property is called for a directory.</exception><returns>The size of the current file in bytes.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.ToString">
            <summary>Returns a string that represents the current object.</summary><returns>A string that represents the current object.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.GetAccessControl">
            <summary>
                Gets a access control object that encapsulates the access control list (ACL) entries for the file or directory in the file system.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.GetAccessControl(System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections)">
            <summary>
                Gets a access control object that encapsulates the access control list (ACL) entries for the file or directory in the file system.
            </summary><param name="includeSections">One of the <see cref="T:System.IO.Abstractions.IFileSystemAclSupport.AccessControlSections" /> values that specifies the type of access control list (ACL) information to receive.</param>
        </member>
        <member name="M:System.IO.Abstractions.FileInfoWrapper.SetAccessControl(System.Object)">
            <summary>
                Applies access control list (ACL) entries described by the <paramref name="value" /> object to the file or directory in the file system.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.FileStreamAclExtensions">
            <summary>
                ACL (access control list) extension methods for <see cref="T:System.IO.Abstractions.FileSystemStream" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileStreamAclExtensions.GetAccessControl(System.IO.Abstractions.FileSystemStream)">
            <summary>Returns the security information of a file.</summary><param name="fileStream">An existing file from which to obtain the security information.</param><exception cref="T:System.ArgumentNullException"><paramref name="fileStream" /> is <see langword="null" />.</exception><exception cref="T:System.ObjectDisposedException">The file stream is closed.</exception><returns>The security descriptors of all the access control sections of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileStreamAclExtensions.SetAccessControl(System.IO.Abstractions.FileSystemStream,System.Security.AccessControl.FileSecurity)">
            <summary>Changes the security attributes of an existing file.</summary><param name="fileStream">An existing file.</param><param name="fileSecurity">The security information to apply to the file.</param><exception cref="T:System.ArgumentNullException"><paramref name="fileStream" /> or <paramref name="fileSecurity" /> is <see langword="null" />.</exception><exception cref="T:System.ObjectDisposedException">The file stream is closed.</exception>
        </member>
        <member name="T:System.IO.Abstractions.FileSystem">
            <summary>
            Abstraction of the file system.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystem.#ctor">
            <summary>
            Abstraction of the file system.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.Directory">
            <summary>
            Abstraction for static methods in <see cref="T:System.IO.Directory" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.File">
            <summary>
            Abstraction for static methods in <see cref="T:System.IO.File" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.FileInfo">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileInfo" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.FileStream">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileStream" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.Path">
            <summary>
            Abstraction for static methods and properties in <see cref="T:System.IO.Path" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.DirectoryInfo">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.DirectoryInfo" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.DriveInfo">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.DriveInfo" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystem.FileSystemWatcher">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileSystemWatcher" />.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.FileSystemBase">
            <summary>
            Abstraction of the file system.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.Directory">
            <summary>
            Abstraction for static methods in <see cref="T:System.IO.Directory" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.File">
            <summary>
            Abstraction for static methods in <see cref="T:System.IO.File" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.FileInfo">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileInfo" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.FileStream">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileStream" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.Path">
            <summary>
            Abstraction for static methods and properties in <see cref="T:System.IO.Path" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.DirectoryInfo">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.DirectoryInfo" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.DriveInfo">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.DriveInfo" />.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemBase.FileSystemWatcher">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileSystemWatcher" />.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.FileSystemInfoBase">
            <summary>Provides the base class for both <see cref="T:System.IO.FileInfo" /> and <see cref="T:System.IO.DirectoryInfo" /> objects.</summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemInfoBase.#ctor(System.IO.Abstractions.IFileSystem)">
            
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.FileSystem">
            <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemInfoBase.CreateAsSymbolicLink(System.String)">
            <summary>Creates a symbolic link located in <see cref="P:System.IO.FileSystemInfo.FullName" /> that points to the specified <paramref name="pathToTarget" />.</summary><param name="pathToTarget">The path of the symbolic link target.</param><exception cref="T:System.ArgumentNullException"><paramref name="pathToTarget" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="pathToTarget" /> is empty.

-or-

<paramref name="pathToTarget" /> contains invalid path characters.</exception><exception cref="T:System.IO.IOException">A file or directory already exists in the location of <see cref="P:System.IO.FileSystemInfo.FullName" />.

-or-

An I/O error occurred.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemInfoBase.Delete">
            <summary>Deletes a file or directory.</summary><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception><exception cref="T:System.IO.IOException">There is an open handle on the file or directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemInfoBase.Refresh">
            <summary>Refreshes the state of the object.</summary><exception cref="T:System.IO.IOException">A device such as a disk drive is not ready.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemInfoBase.ResolveLinkTarget(System.Boolean)">
            <summary>Gets the target of the specified link.</summary><param name="returnFinalTarget"><see langword="true" /> to follow links to the final target; <see langword="false" /> to return the immediate next link.</param><exception cref="T:System.IO.IOException">The file or directory does not exist.

-or-

There are too many levels of symbolic links.</exception><returns>A <see cref="T:System.IO.FileSystemInfo" /> instance if the link exists, independently if the target exists or not; <see langword="null" /> if this file or directory is not a link.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.Attributes">
            <summary>Gets or sets the attributes for the current file or directory.</summary><exception cref="T:System.IO.FileNotFoundException">The specified file doesn't exist. Only thrown when setting the property value.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid. For example, it's on an unmapped drive. Only thrown when setting the property value.</exception><exception cref="T:System.Security.SecurityException">The caller doesn't have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException">.NET Core and .NET 5+ only: The user attempts to set an attribute value but doesn't have write permission.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.ArgumentException">The caller attempts to set an invalid file attribute.  
  
 -or-  
  
 .NET Framework only: The user attempts to set an attribute value but doesn't have write permission.</exception><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><returns><see cref="T:System.IO.FileAttributes" /> of the current <see cref="T:System.IO.FileSystemInfo" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.CreationTime">
            <summary>Gets or sets the creation time of the current file or directory.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid creation time.</exception><returns>The creation date and time of the current <see cref="T:System.IO.FileSystemInfo" /> object.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.CreationTimeUtc">
            <summary>Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid; for example, it is on an unmapped drive.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception><returns>The creation date and time in UTC format of the current <see cref="T:System.IO.FileSystemInfo" /> object.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.Exists">
            <summary>Gets a value indicating whether the file or directory exists.</summary><returns><see langword="true" /> if the file or directory exists; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.Extension">
            <summary>Gets the extension part of the file name, including the leading dot <c>.</c> even if it is the entire file name, or an empty string if no extension is present.</summary><returns>A string containing the <see cref="T:System.IO.FileSystemInfo" /> extension.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.FullName">
            <summary>Gets the full path of the directory or file.</summary><exception cref="T:System.IO.PathTooLongException">The fully qualified path and file name exceed the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A string containing the full path.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.LastAccessTime">
            <summary>Gets or sets the time the current file or directory was last accessed.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time</exception><returns>The time that the current file or directory was last accessed.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.LastAccessTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid access time.</exception><returns>The UTC time that the current file or directory was last accessed.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.LastWriteTime">
            <summary>Gets or sets the time when the current file or directory was last written to.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception><returns>The time the current file was last written.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.LastWriteTimeUtc">
            <summary>Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.</summary><exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh" /> cannot initialize the data.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.ArgumentOutOfRangeException">The caller attempts to set an invalid write time.</exception><returns>The UTC time when the current file was last written to.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.LinkTarget">
            <summary>If this <see cref="T:System.IO.FileSystemInfo" /> instance represents a link, returns the link target's path.
            If a link does not exist in <see cref="P:System.IO.FileSystemInfo.FullName" />, or this instance does not represent a link, returns <see langword="null" />.</summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemInfoBase.Name">
            <summary>For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the <see langword="Name" /> property gets the name of the directory.</summary><returns>A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension.</returns>
        </member>
        <member name="T:System.IO.Abstractions.FileSystemWatcherBase">
            <summary>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.FileSystem">
            <summary>
                Exposes the underlying file system implementation.
                <para />
                This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.IncludeSubdirectories">
            <summary>Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</summary><returns><see langword="true" /> if you want to monitor subdirectories; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.Container">
            <summary>Encapsulates zero or more components.</summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.EnableRaisingEvents">
            <summary>Gets or sets a value indicating whether the component is enabled.</summary><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.FileSystemWatcher" /> object has been disposed.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><exception cref="T:System.IO.FileNotFoundException">The directory specified in <see cref="P:System.IO.FileSystemWatcher.Path" /> could not be found.</exception><exception cref="T:System.ArgumentException"><see cref="P:System.IO.FileSystemWatcher.Path" /> has not been set or is invalid.</exception><returns><see langword="true" /> if the component is enabled; otherwise, <see langword="false" />. The default is <see langword="false" />. If you are using the component on a designer in Visual Studio 2005, the default is <see langword="true" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.Filter">
            <summary>Gets or sets the filter string used to determine what files are monitored in a directory.</summary><returns>The filter string. The default is "*.*" (Watches all files.)</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.Filters">
            <summary>Gets the collection of all the filters used to determine what files are monitored in a directory.</summary><returns>A filter collection.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.InternalBufferSize">
            <summary>Gets or sets the size (in bytes) of the internal buffer.</summary><returns>The internal buffer size in bytes. The default is 8192 (8 KB).</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.NotifyFilter">
            <summary>Gets or sets the type of changes to watch for.</summary><exception cref="T:System.ArgumentException">The value is not a valid bitwise OR combination of the <see cref="T:System.IO.NotifyFilters" /> values.</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value that is being set is not valid.</exception><returns>One of the <see cref="T:System.IO.NotifyFilters" /> values. The default is the bitwise OR combination of <see langword="LastWrite" />, <see langword="FileName" />, and <see langword="DirectoryName" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.Path">
            <summary>Gets or sets the path of the directory to watch.</summary><exception cref="T:System.ArgumentException">The specified path does not exist or could not be found.  
  
 -or-  
  
 The specified path contains wildcard characters.  
  
 -or-  
  
 The specified path contains invalid path characters.</exception><returns>The path to monitor. The default is an empty string ("").</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.Site">
            <summary>Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.IO.FileSystemWatcher" />.</summary><returns>An <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.IO.FileSystemWatcher" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherBase.SynchronizingObject">
            <summary>Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</summary><returns>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> that represents the object used to marshal the event handler calls issued as a result of a directory change. The default is <see langword="null" />.</returns>
        </member>
        <member name="E:System.IO.Abstractions.FileSystemWatcherBase.Changed">
            <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is changed.</summary>
        </member>
        <member name="E:System.IO.Abstractions.FileSystemWatcherBase.Created">
            <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is created.</summary>
        </member>
        <member name="E:System.IO.Abstractions.FileSystemWatcherBase.Deleted">
            <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is deleted.</summary>
        </member>
        <member name="E:System.IO.Abstractions.FileSystemWatcherBase.Error">
            <summary>Occurs when the instance of <see cref="T:System.IO.FileSystemWatcher" /> is unable to continue monitoring changes or when the internal buffer overflows.</summary>
        </member>
        <member name="E:System.IO.Abstractions.FileSystemWatcherBase.Renamed">
            <summary>Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path" /> is renamed.</summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.BeginInit">
            <summary>Begins the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component. The initialization occurs at run time.</summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.EndInit">
            <summary>Ends the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component. The initialization occurs at run time.</summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.WaitForChanged(System.IO.WatcherChangeTypes)">
            <summary>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</summary><param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</param><returns>A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
            <summary>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</summary><param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</param><param name="timeout">The time (in milliseconds) to wait before timing out.</param><returns>A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.op_Implicit(System.IO.FileSystemWatcher)~System.IO.Abstractions.FileSystemWatcherBase">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.OnCreated(System.Object,System.IO.FileSystemEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.OnDeleted(System.Object,System.IO.FileSystemEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherBase.OnError(System.Object,System.IO.ErrorEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:System.IO.Abstractions.FileSystemWatcherFactory">
            <summary>
            A factory for the creation of wrappers for <see cref="T:System.IO.FileSystemWatcher" /> in a <see cref="T:System.IO.Abstractions.IFileSystem" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.#ctor(System.IO.Abstractions.IFileSystem)">
            
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherFactory.FileSystem">
            <summary>
                Exposes the underlying file system implementation.
                <para />
                This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.New">
            <summary>
            Initializes a new instance of a wrapper for <see cref="T:System.IO.FileSystemWatcher" /> which implements <see cref="T:System.IO.Abstractions.IFileSystemWatcher" />.
            </summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.New(System.String)">
            <summary>
            Initializes a new instance of a wrapper for <see cref="T:System.IO.FileSystemWatcher" /> which implements <see cref="T:System.IO.Abstractions.IFileSystemWatcher" />.
            </summary><param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.New(System.String,System.String)">
            <summary>
            Initializes a new instance of a wrapper for <see cref="T:System.IO.FileSystemWatcher" /> which implements <see cref="T:System.IO.Abstractions.IFileSystemWatcher" />.
            </summary><param name="path">The directory to monitor, in standard or Universal Naming Convention (UNC) notation.</param><param name="filter">
            The type of files to watch.
            For example, <c>"*.txt"</c> watches for changes to all text files.
            </param>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherFactory.Wrap(System.IO.FileSystemWatcher)">
            <summary>
            Wraps the <paramref name="fileSystemWatcher" /> to the testable interface <see cref="T:System.IO.Abstractions.IFileSystemWatcher" />.
            </summary>
        </member>
        <member name="T:System.IO.Abstractions.FileSystemWatcherWrapper">
            <summary>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.#ctor(System.IO.Abstractions.IFileSystem)">
            <summary>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.#ctor(System.IO.Abstractions.IFileSystem,System.String)">
            <summary>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.#ctor(System.IO.Abstractions.IFileSystem,System.String,System.String)">
            <summary>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.#ctor(System.IO.Abstractions.IFileSystem,System.IO.FileSystemWatcher)">
            <summary>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.FileSystem">
            <summary>
                Exposes the underlying file system implementation.
                <para />
                This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.IncludeSubdirectories">
            <summary>Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</summary><returns><see langword="true" /> if you want to monitor subdirectories; otherwise, <see langword="false" />. The default is <see langword="false" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.Container">
            <summary>Encapsulates zero or more components.</summary>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.EnableRaisingEvents">
            <summary>Gets or sets a value indicating whether the component is enabled.</summary><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.FileSystemWatcher" /> object has been disposed.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception><exception cref="T:System.IO.FileNotFoundException">The directory specified in <see cref="P:System.IO.FileSystemWatcher.Path" /> could not be found.</exception><exception cref="T:System.ArgumentException"><see cref="P:System.IO.FileSystemWatcher.Path" /> has not been set or is invalid.</exception><returns><see langword="true" /> if the component is enabled; otherwise, <see langword="false" />. The default is <see langword="false" />. If you are using the component on a designer in Visual Studio 2005, the default is <see langword="true" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.Filter">
            <summary>Gets or sets the filter string used to determine what files are monitored in a directory.</summary><returns>The filter string. The default is "*.*" (Watches all files.)</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.Filters">
            <summary>Gets the collection of all the filters used to determine what files are monitored in a directory.</summary><returns>A filter collection.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.InternalBufferSize">
            <summary>Gets or sets the size (in bytes) of the internal buffer.</summary><returns>The internal buffer size in bytes. The default is 8192 (8 KB).</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.NotifyFilter">
            <summary>Gets or sets the type of changes to watch for.</summary><exception cref="T:System.ArgumentException">The value is not a valid bitwise OR combination of the <see cref="T:System.IO.NotifyFilters" /> values.</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException">The value that is being set is not valid.</exception><returns>One of the <see cref="T:System.IO.NotifyFilters" /> values. The default is the bitwise OR combination of <see langword="LastWrite" />, <see langword="FileName" />, and <see langword="DirectoryName" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.Path">
            <summary>Gets or sets the path of the directory to watch.</summary><exception cref="T:System.ArgumentException">The specified path does not exist or could not be found.  
  
 -or-  
  
 The specified path contains wildcard characters.  
  
 -or-  
  
 The specified path contains invalid path characters.</exception><returns>The path to monitor. The default is an empty string ("").</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.Site">
            <summary>Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.IO.FileSystemWatcher" />.</summary><returns>An <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.IO.FileSystemWatcher" />.</returns>
        </member>
        <member name="P:System.IO.Abstractions.FileSystemWatcherWrapper.SynchronizingObject">
            <summary>Gets or sets the object used to marshal the event handler calls issued as a result of a directory change.</summary><returns>The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> that represents the object used to marshal the event handler calls issued as a result of a directory change. The default is <see langword="null" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.BeginInit">
            <summary>Begins the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component. The initialization occurs at run time.</summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.EndInit">
            <summary>Ends the initialization of a <see cref="T:System.IO.FileSystemWatcher" /> used on a form or used by another component. The initialization occurs at run time.</summary>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.WaitForChanged(System.IO.WatcherChangeTypes)">
            <summary>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</summary><param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</param><returns>A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileSystemWatcherWrapper.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
            <summary>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</summary><param name="changeType">The <see cref="T:System.IO.WatcherChangeTypes" /> to watch for.</param><param name="timeout">The time (in milliseconds) to wait before timing out.</param><returns>A <see cref="T:System.IO.WaitForChangedResult" /> that contains specific information on the change that occurred.</returns>
        </member>
        <member name="T:System.IO.Abstractions.FileWrapper">
            <summary>Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of <see cref="T:System.IO.FileStream" /> objects.</summary>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>Asynchronously appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param><param name="contents">The lines to append to the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous append operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously appends lines to a file by using a specified encoding, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param><param name="contents">The lines to append to the file.</param><param name="encoding">The character encoding to use.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous append operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.AppendAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a file or creates a file if it does not already exist, appends the specified string to the file, and then closes the file.</summary><param name="path">The file to append the specified string to.</param><param name="contents">The string to append to the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous append operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.AppendAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a file or creates the file if it does not already exist, appends the specified string to the file using the specified encoding, and then closes the file.</summary><param name="path">The file to append the specified string to.</param><param name="contents">The string to append to the file.</param><param name="encoding">The character encoding to use.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous append operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous read operation, which wraps the byte array containing the contents of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a text file, reads all lines of the file, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous read operation, which wraps the string array containing all lines of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadAllLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a text file, reads all lines of the file with the specified encoding, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="encoding">The encoding applied to the contents of the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous read operation, which wraps the string array containing all lines of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadAllTextAsync(System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a text file, reads all the text in the file, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous read operation, which wraps the string containing all text in the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously opens a text file, reads all text in the file with the specified encoding, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="encoding">The encoding applied to the contents of the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous read operation, which wraps the string containing all text in the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)">
            <summary>Asynchronously creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to.</param><param name="bytes">The bytes to write to the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>Asynchronously creates a new file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to write to.</param><param name="contents">The lines to write to the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously creates a new file, write the specified lines to the file by using the specified encoding, and then closes the file.</summary><param name="path">The file to write to.</param><param name="contents">The lines to write to the file.</param><param name="encoding">The character encoding to use.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllTextAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>Asynchronously creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to.</param><param name="contents">The string to write to the file.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>Asynchronously creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.</summary><param name="path">The file to write to.</param><param name="contents">The string to write to the file.</param><param name="encoding">The encoding to apply to the string.</param><param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param><returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc cref="M:System.IO.Abstractions.FileBase.#ctor(System.IO.Abstractions.IFileSystem)" />
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param><param name="contents">The lines to append to the file.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" /> exceeds the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have permission to write to the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specifies a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> is a directory.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>Appends lines to a file by using a specified encoding, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file.</summary><param name="path">The file to append the lines to. The file is created if it doesn't already exist.</param><param name="contents">The lines to append to the file.</param><param name="encoding">The character encoding to use.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">Either <paramref name="path" />, <paramref name="contents" />, or <paramref name="encoding" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" /> exceeds the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specifies a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> is a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.AppendAllText(System.String,System.String)">
            <summary>Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.</summary><param name="path">The file to append the specified string to.</param><param name="contents">The string to append to the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>Appends the specified string to the file using the specified encoding, creating the file if it does not already exist.</summary><param name="path">The file to append the specified string to.</param><param name="contents">The string to append to the file.</param><param name="encoding">The character encoding to use.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.AppendText(System.String)">
            <summary>Creates a <see cref="T:System.IO.StreamWriter" /> that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist.</summary><param name="path">The path to the file to append to.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, the directory doesn't exist or it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A stream writer that appends UTF-8 encoded text to the specified file or to a new file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Copy(System.String,System.String)">
            <summary>Copies an existing file to a new file. Overwriting a file of the same name is not allowed.</summary><param name="sourceFileName">The file to copy.</param><param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="sourceFileName" /> or <paramref name="destFileName" /> specifies a directory.</exception><exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName" /> was not found.</exception><exception cref="T:System.IO.IOException"><paramref name="destFileName" /> exists.  
  
 -or-  
  
 An I/O error has occurred.</exception><exception cref="T:System.NotSupportedException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Copy(System.String,System.String,System.Boolean)">
            <summary>Copies an existing file to a new file. Overwriting a file of the same name is allowed.</summary><param name="sourceFileName">The file to copy.</param><param name="destFileName">The name of the destination file. This cannot be a directory.</param><param name="overwrite"><see langword="true" /> if the destination file can be overwritten; otherwise, <see langword="false" />.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="destFileName" /> is read-only.
        
 -or-  
  
<paramref name="overwrite" /> is <see langword="true" />, <paramref name="destFileName" /> exists and is hidden, but <paramref name="sourceFileName" /> is not hidden.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="sourceFileName" /> or <paramref name="destFileName" /> specifies a directory.</exception><exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName" /> was not found.</exception><exception cref="T:System.IO.IOException"><paramref name="destFileName" /> exists and <paramref name="overwrite" /> is <see langword="false" />.  
  
 -or-  
  
 An I/O error has occurred.</exception><exception cref="T:System.NotSupportedException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Create(System.String)">
            <summary>Creates or overwrites a file in the specified path.</summary><param name="path">The path and name of the file to create.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="path" /> specified a file that is read-only.
        
 -or-  
  
 <paramref name="path" /> specified a file that is hidden.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.IO.FileStream" /> that provides read/write access to the file specified in <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Create(System.String,System.Int32)">
            <summary>Creates or overwrites a file in the specified path, specifying a buffer size.</summary><param name="path">The path and name of the file to create.</param><param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="path" /> specified a file that is read-only.
        
 -or-  
  
 <paramref name="path" /> specified a file that is hidden.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.IO.FileStream" /> with the specified buffer size that provides read/write access to the file specified in <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Create(System.String,System.Int32,System.IO.FileOptions)">
            <summary>Creates or overwrites a file in the specified path, specifying a buffer size and options that describe how to create or overwrite the file.</summary><param name="path">The path and name of the file to create.</param><param name="bufferSize">The number of bytes buffered for reads and writes to the file.</param><param name="options">One of the <see cref="T:System.IO.FileOptions" /> values that describes how to create or overwrite the file.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="path" /> specified a file that is read-only.
        
 -or-  
  
 <paramref name="path" /> specified a file that is hidden.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while creating the file.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A new file with the specified buffer size.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.CreateSymbolicLink(System.String,System.String)">
            <summary>Creates a file symbolic link identified by <paramref name="path" /> that points to <paramref name="pathToTarget" />.</summary><param name="path">The path where the symbolic link should be created.</param><param name="pathToTarget">The path of the target to which the symbolic link points.</param><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="pathToTarget" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="path" /> or <paramref name="pathToTarget" /> is empty.

-or-

<paramref name="path" /> or <paramref name="pathToTarget" /> contains a <see langword="null" /> character.</exception><exception cref="T:System.IO.IOException">A file or directory already exists in the location of <paramref name="path" />.

-or-

An I/O error occurred.</exception><returns>A <see cref="T:System.IO.FileInfo" /> instance that wraps the newly created file symbolic link.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.CreateText(System.String)">
            <summary>Creates or opens a file for writing UTF-8 encoded text. If the file already exists, its contents are overwritten.</summary><param name="path">The file to be opened for writing.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="path" /> specified a file that is read-only.
        
 -or-  
  
 <paramref name="path" /> specified a file that is hidden.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.IO.StreamWriter" /> that writes to the specified file using UTF-8 encoding.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Decrypt(System.String)">
            <summary>Decrypts a file that was encrypted by the current account using the <see cref="M:System.IO.File.Encrypt(System.String)" /> method.</summary><param name="path">A path that describes a file to decrypt.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: The <paramref name="path" /> parameter is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the <paramref name="path" /> parameter could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. For example, the encrypted file is already open.  
  
 -or-  
  
 This operation is not supported on the current platform.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="path" /> parameter specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 The <paramref name="path" /> parameter specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Delete(System.String)">
            <summary>Deletes the specified file.</summary><param name="path">The name of the file to be deleted. Wildcard characters are not supported.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">The specified file is in use.  
  
 -or-  
  
 There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
  
 -or-  
  
 The file is an executable file that is in use.  
  
 -or-  
  
 <paramref name="path" /> is a directory.  
  
 -or-  
  
 <paramref name="path" /> specified a read-only file.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Encrypt(System.String)">
            <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary><param name="path">A path that describes a file to encrypt.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: The <paramref name="path" /> parameter is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="path" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the <paramref name="path" /> parameter could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.  
  
 -or-  
  
 This operation is not supported on the current platform.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.PlatformNotSupportedException">The current operating system is not Windows NT or later.</exception><exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="path" /> parameter specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 The <paramref name="path" /> parameter specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Exists(System.String)">
            <summary>Determines whether the specified file exists.</summary><param name="path">The file to check.</param><returns><see langword="true" /> if the caller has the required permissions and <paramref name="path" /> contains the name of an existing file; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="path" /> is <see langword="null" />, an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns <see langword="false" /> regardless of the existence of <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.GetAttributes(System.String)">
            <summary>Gets the <see cref="T:System.IO.FileAttributes" /> of the file on the path.</summary><param name="path">The path to the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is empty, contains only white spaces, or contains invalid characters.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="path" /> represents a file and is invalid, such as being on an unmapped drive, or the file cannot be found.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> represents a directory and is invalid, such as being on an unmapped drive, or the directory cannot be found.</exception><exception cref="T:System.IO.IOException">This file is being used by another process.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><returns>The <see cref="T:System.IO.FileAttributes" /> of the file on the path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.GetCreationTime(System.String)">
            <summary>Returns the creation date and time of the specified file or directory.</summary><param name="path">The file or directory for which to obtain creation date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.DateTime" /> structure set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.GetCreationTimeUtc(System.String)">
            <summary>Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.</summary><param name="path">The file or directory for which to obtain creation date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.DateTime" /> structure set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.GetLastAccessTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to obtain access date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.GetLastAccessTimeUtc(System.String)">
            <summary>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.</summary><param name="path">The file or directory for which to obtain access date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.GetLastWriteTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last written to.</summary><param name="path">The file or directory for which to obtain write date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.GetLastWriteTimeUtc(System.String)">
            <summary>Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to.</summary><param name="path">The file or directory for which to obtain write date and time information.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.DateTime" /> structure set to the date and time that the specified file or directory was last written to. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Move(System.String,System.String)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary><param name="sourceFileName">The name of the file to move. Can include a relative or absolute path.</param><param name="destFileName">The new path and name for the file.</param><exception cref="T:System.IO.IOException"><paramref name="destFileName" /> already exists.

          -or-

          An I/O error has occurred, e.g. while copying the file across disk volumes.</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName" /> was not found.</exception><exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Move(System.String,System.String,System.Boolean)">
            <summary>Moves a specified file to a new location, providing the options to specify a new file name and to overwrite the destination file if it already exists.</summary><param name="sourceFileName">The name of the file to move. Can include a relative or absolute path.</param><param name="destFileName">The new path and name for the file.</param><param name="overwrite"><see langword="true" /> to overwrite the destination file if it already exists; <see langword="false" /> otherwise.</param><exception cref="T:System.IO.IOException"><paramref name="destFileName" /> already exists and <paramref name="overwrite" /> is <see langword="false" />.

          -or-

          An I/O error has occurred, e.g. while copying the file across disk volumes.</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceFileName" /> was not found.</exception><exception cref="T:System.ArgumentNullException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is a zero-length string, contains only white space, or contains invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The path specified in <paramref name="sourceFileName" /> or <paramref name="destFileName" /> is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="sourceFileName" /> or <paramref name="destFileName" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Open(System.String,System.IO.FileMode)">
            <summary>Opens a <see cref="T:System.IO.FileStream" /> on the specified path with read/write access with no sharing.</summary><param name="path">The file to open.</param><param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" /> and the specified file is a hidden file.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> specified an invalid value.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.IO.FileStream" /> opened in the specified mode and path, with read/write access and not shared.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>Opens a <see cref="T:System.IO.FileStream" /> on the specified path, with the specified mode and access with no sharing.</summary><param name="path">The file to open.</param><param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param><param name="access">A <see cref="T:System.IO.FileAccess" /> value that specifies the operations that can be performed on the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="access" /> specified <see langword="Read" /> and <paramref name="mode" /> specified <see langword="Create" />, <see langword="CreateNew" />, <see langword="Truncate" />, or <see langword="Append" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only and <paramref name="access" /> is not <see langword="Read" />.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" /> and the specified file is a hidden file.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> or <paramref name="access" /> specified an invalid value.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>An unshared <see cref="T:System.IO.FileStream" /> that provides access to the specified file, with the specified mode and access.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Opens a <see cref="T:System.IO.FileStream" /> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</summary><param name="path">The file to open.</param><param name="mode">A <see cref="T:System.IO.FileMode" /> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param><param name="access">A <see cref="T:System.IO.FileAccess" /> value that specifies the operations that can be performed on the file.</param><param name="share">A <see cref="T:System.IO.FileShare" /> value specifying the type of access other threads have to the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.  
  
 -or-  
  
 <paramref name="access" /> specified <see langword="Read" /> and <paramref name="mode" /> specified <see langword="Create" />, <see langword="CreateNew" />, <see langword="Truncate" />, or <see langword="Append" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only and <paramref name="access" /> is not <see langword="Read" />.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="mode" /> is <see cref="F:System.IO.FileMode.Create" /> and the specified file is a hidden file.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" />, <paramref name="access" />, or <paramref name="share" /> specified an invalid value.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.IO.FileStream" /> on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Open(System.String,System.IO.FileStreamOptions)">
            <summary>Initializes a new instance of the <see cref="T:System.IO.FileStream" /> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, additional file options and the allocation size.</summary><param name="path">The path of the file to open.</param><param name="options">An object that describes optional <see cref="T:System.IO.FileStream" /> parameters to use.</param><returns>A <see cref="T:System.IO.FileStream" /> instance that wraps the opened file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.OpenRead(System.String)">
            <summary>Opens an existing file for reading.</summary><param name="path">The file to be opened for reading.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><returns>A read-only <see cref="T:System.IO.FileStream" /> on the specified path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.OpenText(System.String)">
            <summary>Opens an existing UTF-8 encoded text file for reading.</summary><param name="path">The file to be opened for reading.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>A <see cref="T:System.IO.StreamReader" /> on the specified path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.OpenWrite(System.String)">
            <summary>Opens an existing file or creates a new file for writing.</summary><param name="path">The file to be opened for writing.</param><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.  
  
 -or-  
  
 <paramref name="path" /> specified a read-only file or directory.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><returns>An unshared <see cref="T:System.IO.FileStream" /> object on the specified path with <see cref="F:System.IO.FileAccess.Write" /> access.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadAllBytes(System.String)">
            <summary>Opens a binary file, reads the contents of the file into a byte array, and then closes the file.</summary><param name="path">The file to open for reading.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadAllLines(System.String)">
            <summary>Opens a text file, reads all lines of the file, and then closes the file.</summary><param name="path">The file to open for reading.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>Opens a file, reads all lines of the file with the specified encoding, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="encoding">The encoding applied to the contents of the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A string array containing all lines of the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadAllText(System.String)">
            <summary>Opens a text file, reads all the text in the file, and then closes the file.</summary><param name="path">The file to open for reading.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A string containing all the text in the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadAllText(System.String,System.Text.Encoding)">
            <summary>Opens a file, reads all text in the file with the specified encoding, and then closes the file.</summary><param name="path">The file to open for reading.</param><param name="encoding">The encoding applied to the contents of the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><returns>A string containing all text in the file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadLines(System.String)">
            <summary>Reads the lines of a file.</summary><param name="path">The file to read.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" /> exceeds the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specifies a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> is a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ReadLines(System.String,System.Text.Encoding)">
            <summary>Read the lines of a file that has a specified encoding.</summary><param name="path">The file to read.</param><param name="encoding">The encoding that is applied to the contents of the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="path" /> is invalid (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file specified by <paramref name="path" /> was not found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception><exception cref="T:System.IO.PathTooLongException"><paramref name="path" /> exceeds the system-defined maximum length.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specifies a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> is a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception><returns>All the lines of the file, or the lines that are the result of a query.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Replace(System.String,System.String,System.String)">
            <summary>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file.</summary><param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName" />.</param><param name="destinationFileName">The name of the file being replaced.</param><param name="destinationBackupFileName">The name of the backup file.</param><exception cref="T:System.ArgumentException">The path described by the <paramref name="destinationFileName" /> parameter was not of a legal form.  
  
 -or-  
  
 The path described by the <paramref name="destinationBackupFileName" /> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destinationFileName" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.  
  
 -or-  
  
 The file described by the <paramref name="destinationBackupFileName" /> parameter could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.  
  
-or-
  
 The <paramref name="sourceFileName" /> and <paramref name="destinationFileName" /> parameters specify the same file.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="sourceFileName" /> or <paramref name="destinationFileName" /> parameter specifies a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 Source or destination parameters specify a directory instead of a file.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file and optionally ignores merge errors.</summary><param name="sourceFileName">The name of a file that replaces the file specified by <paramref name="destinationFileName" />.</param><param name="destinationFileName">The name of the file being replaced.</param><param name="destinationBackupFileName">The name of the backup file.</param><param name="ignoreMetadataErrors"><see langword="true" /> to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, <see langword="false" />.</param><exception cref="T:System.ArgumentException">The path described by the <paramref name="destinationFileName" /> parameter was not of a legal form.  
  
 -or-  
  
 The path described by the <paramref name="destinationBackupFileName" /> parameter was not of a legal form.</exception><exception cref="T:System.ArgumentNullException">The <paramref name="destinationFileName" /> parameter is <see langword="null" />.</exception><exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified.</exception><exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo" /> object could not be found.  
  
 -or-  
  
 The file described by the <paramref name="destinationBackupFileName" /> parameter could not be found.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.  
  
-or-
  
 The <paramref name="sourceFileName" /> and <paramref name="destinationFileName" /> parameters specify the same file.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.UnauthorizedAccessException">The <paramref name="sourceFileName" /> or <paramref name="destinationFileName" /> parameter specifies a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 Source or destination parameters specify a directory instead of a file.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.ResolveLinkTarget(System.String,System.Boolean)">
            <summary>Gets the target of the specified file link.</summary><param name="linkPath">The path of the file link.</param><param name="returnFinalTarget"><see langword="true" /> to follow links to the final target; <see langword="false" /> to return the immediate next link.</param><exception cref="T:System.IO.IOException">The file on <paramref name="linkPath" /> does not exist.

-or-

There are too many levels of symbolic links.</exception><returns>A <see cref="T:System.IO.FileInfo" /> instance if <paramref name="linkPath" /> exists, independently if the target exists or not. <see langword="null" /> if <paramref name="linkPath" /> is not a link.</returns>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>Sets the specified <see cref="T:System.IO.FileAttributes" /> of the file on the specified path.</summary><param name="path">The path to the file.</param><param name="fileAttributes">A bitwise combination of the enumeration values.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, (for example, it is on an unmapped drive).</exception><exception cref="T:System.IO.FileNotFoundException">The file cannot be found.</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="path" /> specified a file that is read-only.  
  
 -or-  
  
 This operation is not supported on the current platform.  
  
 -or-  
  
 <paramref name="path" /> specified a directory.  
  
 -or-  
  
 The caller does not have the required permission.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the date and time the file was created.</summary><param name="path">The file for which to set the creation date and time information.</param><param name="creationTime">A <see cref="T:System.DateTime" /> containing the value to set for the creation date and time of <paramref name="path" />. This value is expressed in local time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while performing the operation.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> specifies a value outside the range of dates, times, or both permitted for this operation.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the file was created.</summary><param name="path">The file for which to set the creation date and time information.</param><param name="creationTimeUtc">A <see cref="T:System.DateTime" /> containing the value to set for the creation date and time of <paramref name="path" />. This value is expressed in UTC time.</param><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.IOException">An I/O error occurred while performing the operation.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="creationTime" /> specifies a value outside the range of dates, times, or both permitted for this operation.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.SetLastAccessTime(System.String,System.DateTime)">
            <summary>Sets the date and time the specified file was last accessed.</summary><param name="path">The file for which to set the access date and time information.</param><param name="lastAccessTime">A <see cref="T:System.DateTime" /> containing the value to set for the last access date and time of <paramref name="path" />. This value is expressed in local time.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed.</summary><param name="path">The file for which to set the access date and time information.</param><param name="lastAccessTimeUtc">A <see cref="T:System.DateTime" /> containing the value to set for the last access date and time of <paramref name="path" />. This value is expressed in UTC time.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastAccessTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Sets the date and time that the specified file was last written to.</summary><param name="path">The file for which to set the date and time information.</param><param name="lastWriteTime">A <see cref="T:System.DateTime" /> containing the value to set for the last write date and time of <paramref name="path" />. This value is expressed in local time.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTime" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to.</summary><param name="path">The file for which to set the date and time information.</param><param name="lastWriteTimeUtc">A <see cref="T:System.DateTime" /> containing the value to set for the last write date and time of <paramref name="path" />. This value is expressed in UTC time.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters. You can query for invalid characters by using the <see cref="M:System.IO.Path.GetInvalidPathChars" /> method.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><exception cref="T:System.IO.FileNotFoundException">The specified path was not found.</exception><exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lastWriteTimeUtc" /> specifies a value outside the range of dates or times permitted for this operation.</exception>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file.
            If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file. </param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" /> or contents is empty.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            path specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            Given a byte array and a file path, this method opens the specified file, writes the contents of the byte array to the file, and then closes the file.
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new file, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is <see langword="null" />.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path" /> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <remarks>
            <para>
                If the target file already exists, it is overwritten.
            </para>
            <para>
                You can use this method to create the contents for a collection class that takes an <see cref="T:System.Collections.Generic.IEnumerable`1" /> in its constructor, such as a <see cref="T:System.Collections.Generic.List`1" />, <see cref="T:System.Collections.Generic.HashSet`1" />, or a <see cref="T:System.Collections.Generic.SortedSet`1" /> class.
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
            Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The lines to write to the file.</param>
            <param name="encoding">The character encoding to use.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path" />, <paramref name="contents" />, or <paramref name="encoding" /> is <see langword="null" />.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path" /> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <remarks>
            <para>
                If the target file already exists, it is overwritten.
            </para>
            <para>
                You can use this method to create a file that contains the following:
            <list type="bullet">
            <item>
            <description>The results of a LINQ to Objects query on the lines of a file, as obtained by using the ReadLines method.</description>
            </item>
            <item>
            <description>The contents of a collection that implements an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of strings.</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllLines(System.String,System.String[])">
            <summary>
            Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is <see langword="null" />.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path" /> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            <para>
                If the target file already exists, it is overwritten.
            </para>
            <para>
                The default behavior of the WriteAllLines method is to write out data using UTF-8 encoding without a byte order mark (BOM). If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <see cref="M:System.IO.Abstractions.FileBase.WriteAllLines(System.String,System.String[],System.Text.Encoding)" /> method overload with <see cref="T:System.Text.UTF8Encoding" /> encoding.
            </para>
            <para>
                Given a string array and a file path, this method opens the specified file, writes the string array to the file using the specified encoding,
                and then closes the file.
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string array to the file by using the specified encoding, and then closes the file.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="contents">The string array to write to the file.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding" /> object that represents the character encoding applied to the string array.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="path" /> or <paramref name="contents" /> is <see langword="null" />.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            <paramref name="path" /> specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            <paramref name="path" /> specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            <para>
                If the target file already exists, it is overwritten.
            </para>
            <para>
                Given a string array and a file path, this method opens the specified file, writes the string array to the file using the specified encoding,
                and then closes the file.
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to. </param>
            <param name="contents">The string to write to the file. </param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" /> or contents is empty.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            path specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            This method uses UTF-8 encoding without a Byte-Order Mark (BOM), so using the <see cref="M:Encoding.GetPreamble" /> method will return an empty byte array.
            If it is necessary to include a UTF-8 identifier, such as a byte order mark, at the beginning of a file, use the <see cref="M:System.IO.Abstractions.FileBase.WriteAllText(System.String,System.String,System.Text.Encoding)" /> method overload with <see cref="T:System.Text.UTF8Encoding" /> encoding.
            <para>
            Given a string and a file path, this method opens the specified file, writes the string to the file, and then closes the file.
            </para>
            </remarks>
        </member>
        <member name="M:System.IO.Abstractions.FileWrapper.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to. </param>
            <param name="contents">The string to write to the file. </param>
            <param name="encoding">The encoding to apply to the string.</param>
            <exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" /> or contents is empty.</exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.UnauthorizedAccessException">
            path specified a file that is read-only.
            -or-
            This operation is not supported on the current platform.
            -or-
            path specified a directory.
            -or-
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="path" /> was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="path" /> is in an invalid format.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <remarks>
            Given a string and a file path, this method opens the specified file, writes the string to the file using the specified encoding, and then closes the file.
            The file handle is guaranteed to be closed by this method, even if exceptions are raised.
            </remarks>
        </member>
        <member name="T:System.IO.Abstractions.PathBase">
            <summary>Performs operations on <see cref="T:System.String" /> instances that contain file or directory path information. These operations are performed in a cross-platform manner.</summary>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc />
        </member>
        <member name="P:System.IO.Abstractions.PathBase.FileSystem">
            <summary>
            Exposes the underlying filesystem implementation. This is useful for implementing extension methods.
            </summary>
        </member>
        <member name="P:System.IO.Abstractions.PathBase.AltDirectorySeparatorChar">
            <summary>Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
        </member>
        <member name="P:System.IO.Abstractions.PathBase.DirectorySeparatorChar">
            <summary>Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
        </member>
        <member name="P:System.IO.Abstractions.PathBase.InvalidPathChars">
            <summary>Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <see cref="T:System.IO.Path" /> class.</summary>
        </member>
        <member name="P:System.IO.Abstractions.PathBase.PathSeparator">
            <summary>A platform-specific separator character used to separate path strings in environment variables.</summary>
        </member>
        <member name="P:System.IO.Abstractions.PathBase.VolumeSeparatorChar">
            <summary>Provides a platform-specific volume separator character.</summary>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.ChangeExtension(System.String,System.String)">
            <summary>Changes the extension of a path string.</summary><param name="path">The path information to modify.</param><param name="extension">The new extension (with or without a leading period). Specify <see langword="null" /> to remove an existing extension from <paramref name="path" />.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><returns>The modified path information.  
  
 On Windows-based desktop platforms, if <paramref name="path" /> is <see langword="null" /> or an empty string (""), the path information is returned unmodified. If <paramref name="extension" /> is <see langword="null" />, the returned string contains the specified path with its extension removed. If <paramref name="path" /> has no extension, and <paramref name="extension" /> is not <see langword="null" />, the returned path string contains <paramref name="extension" /> appended to the end of <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.Combine(System.String[])">
            <summary>Combines an array of strings into a path.</summary><param name="paths">An array of parts of the path.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: One of the strings in the array contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException">One of the strings in the array is <see langword="null" />.</exception><returns>The combined paths.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.Combine(System.String,System.String)">
            <summary>Combines two strings into a path.</summary><param name="path1">The first path to combine.</param><param name="path2">The second path to combine.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path1" /> or <paramref name="path2" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path1" /> or <paramref name="path2" /> is <see langword="null" />.</exception><returns>The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <paramref name="path2" /> contains an absolute path, this method returns <paramref name="path2" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.Combine(System.String,System.String,System.String)">
            <summary>Combines three strings into a path.</summary><param name="path1">The first path to combine.</param><param name="path2">The second path to combine.</param><param name="path3">The third path to combine.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> is <see langword="null" />.</exception><returns>The combined paths.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.Combine(System.String,System.String,System.String,System.String)">
            <summary>Combines four strings into a path.</summary><param name="path1">The first path to combine.</param><param name="path2">The second path to combine.</param><param name="path3">The third path to combine.</param><param name="path4">The fourth path to combine.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> is <see langword="null" />.</exception><returns>The combined paths.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetDirectoryName(System.String)">
            <summary>Returns the directory information for the specified path.</summary><param name="path">The path of a file or directory.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: The <paramref name="path" /> parameter contains invalid characters, is empty, or contains only white spaces.</exception><exception cref="T:System.IO.PathTooLongException">The <paramref name="path" /> parameter is longer than the system-defined maximum length.

Note: In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</exception><returns>Directory information for <paramref name="path" />, or <see langword="null" /> if <paramref name="path" /> denotes a root directory or is null. Returns <see cref="F:System.String.Empty" /> if <paramref name="path" /> does not contain directory information.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetExtension(System.String)">
            <summary>Returns the extension (including the period ".") of the specified path string.</summary><param name="path">The path string from which to get the extension.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><returns>The extension of the specified path (including the period "."), or <see langword="null" />, or <see cref="F:System.String.Empty" />. If <paramref name="path" /> is <see langword="null" />, <see cref="M:System.IO.Path.GetExtension(System.String)" /> returns <see langword="null" />. If <paramref name="path" /> does not have extension information, <see cref="M:System.IO.Path.GetExtension(System.String)" /> returns <see cref="F:System.String.Empty" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetFileName(System.String)">
            <summary>Returns the file name and extension of the specified path string.</summary><param name="path">The path string from which to obtain the file name and extension.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><returns>The characters after the last directory separator character in <paramref name="path" />. If the last character of <paramref name="path" /> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty" />. If <paramref name="path" /> is <see langword="null" />, this method returns <see langword="null" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetFileNameWithoutExtension(System.String)">
            <summary>Returns the file name of the specified path string without the extension.</summary><param name="path">The path of the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><returns>The string returned by <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, minus the last period (.) and all characters following it.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetFullPath(System.String)">
            <summary>Returns the absolute path for the specified path string.</summary><param name="path">The file or directory for which to obtain absolute path information.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.

-or-

 The system could not retrieve the absolute path.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> contains a colon (":") that is not part of a volume identifier (for example, "c:\").</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><returns>The fully qualified location of <paramref name="path" />, such as "C:\MyFile.txt".</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetFullPath(System.String,System.String)">
            <summary>Returns an absolute path from a relative path and a fully qualified base path.</summary><param name="path">A relative path to concatenate to <paramref name="basePath" />.</param><param name="basePath">The beginning of a fully qualified path.</param><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="basePath" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="basePath" /> is not a fully qualified path.

-or-

<paramref name="path" /> or <paramref name="basePath" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><returns>The absolute path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetInvalidFileNameChars">
            <summary>Gets an array containing the characters that are not allowed in file names.</summary><returns>An array containing the characters that are not allowed in file names.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetInvalidPathChars">
            <summary>Gets an array containing the characters that are not allowed in path names.</summary><returns>An array containing the characters that are not allowed in path names.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetPathRoot(System.String)">
            <summary>Gets the root directory information from the path contained in the specified string.</summary><param name="path">A string containing the path from which to obtain root directory information.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.

-or-

.NET Framework only: <see cref="F:System.String.Empty" /> was passed to <paramref name="path" />.</exception><returns>The root directory of <paramref name="path" /> if it is rooted.

 -or-
 
<see cref="F:System.String.Empty" /> if <paramref name="path" /> does not contain root directory information.

 -or-
 
<see langword="null" /> if <paramref name="path" /> is <see langword="null" /> or is effectively empty.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetRandomFileName">
            <summary>Returns a random folder name or file name.</summary><returns>A random folder name or file name.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetTempFileName">
            <summary>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</summary><exception cref="T:System.IO.IOException">An I/O error occurs, such as no unique temporary file name is available.  
  
-or-
  
 This method was unable to create a temporary file.</exception><returns>The full path of the temporary file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetTempPath">
            <summary>Returns the path of the current user's temporary folder.</summary><exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception><returns>The path to the temporary folder, ending with a  <see cref="F:System.IO.Path.DirectorySeparatorChar" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.HasExtension(System.String)">
            <summary>Determines whether a path includes a file name extension.</summary><param name="path">The path to search for an extension.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><returns><see langword="true" /> if the characters that follow the last directory separator (\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.IsPathRooted(System.String)">
            <summary>Returns a value indicating whether the specified path string contains a root.</summary><param name="path">The path to test.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><returns><see langword="true" /> if <paramref name="path" /> contains a root; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.IsPathFullyQualified(System.String)">
            <summary>Returns a value that indicates whether the specified file path is fixed to a specific drive or UNC path.</summary><param name="path">A file path.</param><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><returns><see langword="true" /> if the path is fixed to a specific drive or UNC path; <see langword="false" /> if the path is relative to the current drive or working directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetRelativePath(System.String,System.String)">
            <summary>Returns a relative path from one path to another.</summary><param name="relativeTo">The source path the result should be relative to. This path is always considered to be a directory.</param><param name="path">The destination path.</param><exception cref="T:System.ArgumentNullException"><paramref name="relativeTo" /> or <paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="relativeTo" /> or <paramref name="path" /> is effectively empty.</exception><returns>The relative path, or <paramref name="path" /> if the paths don't share the same root.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>Concatenates two path components into a single path.</summary><param name="path1">A character span that contains the first path to join.</param><param name="path2">A character span that contains the second path to join.</param><returns>The combined paths.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>Concatenates three path components into a single path.</summary><param name="path1">A character span that contains the first path to join.</param><param name="path2">A character span that contains the second path to join.</param><param name="path3">A character span that contains the third path to join.</param><returns>The concatenated path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
            <summary>Attempts to concatenate two path components to a single preallocated character span, and returns a value that indicates whether the operation succeeded.</summary><param name="path1">A character span that contains the first path to join.</param><param name="path2">A character span that contains the second path to join.</param><param name="path3">A character span that contains the third path to join.</param><param name="destination">A character span to hold the concatenated path.</param><param name="charsWritten">When the method returns, a value that indicates the number of characters written to the <paramref name="destination" />.</param><returns><see langword="true" /> if the concatenation operation is successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
            <summary>Attempts to concatenate two path components to a single preallocated character span, and returns a value that indicates whether the operation succeeded.</summary><param name="path1">A character span that contains the first path to join.</param><param name="path2">A character span that contains the second path to join.</param><param name="destination">A character span to hold the concatenated path.</param><param name="charsWritten">When the method returns, a value that indicates the number of characters written to the <paramref name="destination" />.</param><returns><see langword="true" /> if the concatenation operation is successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.HasExtension(System.ReadOnlySpan{System.Char})">
            <summary>Determines whether the path represented by the specified character span includes a file name extension.</summary><param name="path">The path to search for an extension.</param><returns><see langword="true" /> if the characters that follow the last directory separator character or volume separator in the path include a period (".") followed by one or more characters; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.IsPathFullyQualified(System.ReadOnlySpan{System.Char})">
            <summary>Returns a value that indicates whether the file path represented by the specified character span is fixed to a specific drive or UNC path.</summary><param name="path">A file path.</param><returns><see langword="true" /> if the path is fixed to a specific drive or UNC path; <see langword="false" /> if the path is relative to the current drive or working directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.IsPathRooted(System.ReadOnlySpan{System.Char})">
            <summary>Returns a value that indicates whether the specified character span that represents a file path contains a root.</summary><param name="path">The path to test.</param><returns><see langword="true" /> if <paramref name="path" /> contains a root; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetDirectoryName(System.ReadOnlySpan{System.Char})">
            <summary>Returns the directory information for the specified path represented by a character span.</summary><param name="path">The path to retrieve the directory information from.</param><returns>Directory information for <paramref name="path" />, or an empty span if <paramref name="path" /> is <see langword="null" />, an empty span, or a root (such as \, C:, or \\server\share).</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetExtension(System.ReadOnlySpan{System.Char})">
            <summary>Returns the extension of a file path that is represented by a read-only character span.</summary><param name="path">The file path from which to get the extension.</param><returns>The extension of the specified path (including the period, "."), or <see cref="P:System.ReadOnlySpan`1.Empty" /> if <paramref name="path" /> does not have extension information.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetFileName(System.ReadOnlySpan{System.Char})">
            <summary>Returns the file name and extension of a file path that is represented by a read-only character span.</summary><param name="path">A read-only span that contains the path from which to obtain the file name and extension.</param><returns>The characters after the last directory separator character in <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})">
            <summary>Returns the file name without the extension of a file path that is represented by a read-only character span.</summary><param name="path">A read-only span that contains the path from which to obtain the file name without the extension.</param><returns>The characters in the read-only span returned by <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, minus the last period (.) and all characters following it.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.GetPathRoot(System.ReadOnlySpan{System.Char})">
            <summary>Gets the root directory information from the path contained in the specified character span.</summary><param name="path">A read-only span of characters containing the path from which to obtain root directory information.</param><returns>A read-only span of characters containing the root directory of <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.Join(System.String[])">
            <summary>Concatenates an array of paths into a single path.</summary><param name="paths">An array of paths.</param><returns>The concatenated path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.Join(System.String,System.String)">
            <summary>Concatenates two paths into a single path.</summary><param name="path1">The first path to join.</param><param name="path2">The second path to join.</param><returns>The concatenated path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.Join(System.String,System.String,System.String)">
            <summary>Concatenates three paths into a single path.</summary><param name="path1">The first path to join.</param><param name="path2">The second path to join.</param><param name="path3">The third path to join.</param><returns>The concatenated path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.EndsInDirectorySeparator(System.ReadOnlySpan{System.Char})">
            <summary>Returns a value that indicates whether the path, specified as a read-only span, ends in a directory separator.</summary><param name="path">The path to analyze.</param><returns><see langword="true" /> if the path ends in a directory separator; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.EndsInDirectorySeparator(System.String)">
            <summary>Returns a value that indicates whether the specified path ends in a directory separator.</summary><param name="path">The path to analyze.</param><returns><see langword="true" /> if the path ends in a directory separator; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.TrimEndingDirectorySeparator(System.ReadOnlySpan{System.Char})">
            <summary>Trims one trailing directory separator beyond the root of the specified path.</summary><param name="path">The path to trim.</param><returns>The <paramref name="path" /> without any trailing directory separators.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.TrimEndingDirectorySeparator(System.String)">
            <summary>Trims one trailing directory separator beyond the root of the specified path.</summary><param name="path">The path to trim.</param><returns>The <paramref name="path" /> without any trailing directory separators.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>Concatenates four path components into a single path.</summary><param name="path1">A character span that contains the first path to join.</param><param name="path2">A character span that contains the second path to join.</param><param name="path3">A character span that contains the third path to join.</param><param name="path4">A character span that contains the fourth path to join.</param><returns>The concatenated path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathBase.Join(System.String,System.String,System.String,System.String)">
            <summary>Concatenates four paths into a single path.</summary><param name="path1">The first path to join.</param><param name="path2">The second path to join.</param><param name="path3">The third path to join.</param><param name="path4">The fourth path to join.</param><returns>The concatenated path.</returns>
        </member>
        <member name="T:System.IO.Abstractions.PathWrapper">
            <summary>Performs operations on <see cref="T:System.String" /> instances that contain file or directory path information. These operations are performed in a cross-platform manner.</summary>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.#ctor(System.IO.Abstractions.IFileSystem)">
            <inheritdoc />
        </member>
        <member name="P:System.IO.Abstractions.PathWrapper.AltDirectorySeparatorChar">
            <summary>Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
        </member>
        <member name="P:System.IO.Abstractions.PathWrapper.DirectorySeparatorChar">
            <summary>Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
        </member>
        <member name="P:System.IO.Abstractions.PathWrapper.InvalidPathChars">
            <summary>Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <see cref="T:System.IO.Path" /> class.</summary>
        </member>
        <member name="P:System.IO.Abstractions.PathWrapper.PathSeparator">
            <summary>A platform-specific separator character used to separate path strings in environment variables.</summary>
        </member>
        <member name="P:System.IO.Abstractions.PathWrapper.VolumeSeparatorChar">
            <summary>Provides a platform-specific volume separator character.</summary>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.ChangeExtension(System.String,System.String)">
            <summary>Changes the extension of a path string.</summary><param name="path">The path information to modify.</param><param name="extension">The new extension (with or without a leading period). Specify <see langword="null" /> to remove an existing extension from <paramref name="path" />.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><returns>The modified path information.  
  
 On Windows-based desktop platforms, if <paramref name="path" /> is <see langword="null" /> or an empty string (""), the path information is returned unmodified. If <paramref name="extension" /> is <see langword="null" />, the returned string contains the specified path with its extension removed. If <paramref name="path" /> has no extension, and <paramref name="extension" /> is not <see langword="null" />, the returned path string contains <paramref name="extension" /> appended to the end of <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.Combine(System.String[])">
            <summary>Combines an array of strings into a path.</summary><param name="paths">An array of parts of the path.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: One of the strings in the array contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException">One of the strings in the array is <see langword="null" />.</exception><returns>The combined paths.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.Combine(System.String,System.String)">
            <summary>Combines two strings into a path.</summary><param name="path1">The first path to combine.</param><param name="path2">The second path to combine.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path1" /> or <paramref name="path2" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path1" /> or <paramref name="path2" /> is <see langword="null" />.</exception><returns>The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <paramref name="path2" /> contains an absolute path, this method returns <paramref name="path2" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.Combine(System.String,System.String,System.String)">
            <summary>Combines three strings into a path.</summary><param name="path1">The first path to combine.</param><param name="path2">The second path to combine.</param><param name="path3">The third path to combine.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> is <see langword="null" />.</exception><returns>The combined paths.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.Combine(System.String,System.String,System.String,System.String)">
            <summary>Combines four strings into a path.</summary><param name="path1">The first path to combine.</param><param name="path2">The second path to combine.</param><param name="path3">The third path to combine.</param><param name="path4">The fourth path to combine.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> is <see langword="null" />.</exception><returns>The combined paths.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetDirectoryName(System.String)">
            <summary>Returns the directory information for the specified path.</summary><param name="path">The path of a file or directory.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: The <paramref name="path" /> parameter contains invalid characters, is empty, or contains only white spaces.</exception><exception cref="T:System.IO.PathTooLongException">The <paramref name="path" /> parameter is longer than the system-defined maximum length.

Note: In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</exception><returns>Directory information for <paramref name="path" />, or <see langword="null" /> if <paramref name="path" /> denotes a root directory or is null. Returns <see cref="F:System.String.Empty" /> if <paramref name="path" /> does not contain directory information.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetExtension(System.String)">
            <summary>Returns the extension (including the period ".") of the specified path string.</summary><param name="path">The path string from which to get the extension.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><returns>The extension of the specified path (including the period "."), or <see langword="null" />, or <see cref="F:System.String.Empty" />. If <paramref name="path" /> is <see langword="null" />, <see cref="M:System.IO.Path.GetExtension(System.String)" /> returns <see langword="null" />. If <paramref name="path" /> does not have extension information, <see cref="M:System.IO.Path.GetExtension(System.String)" /> returns <see cref="F:System.String.Empty" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetFileName(System.String)">
            <summary>Returns the file name and extension of the specified path string.</summary><param name="path">The path string from which to obtain the file name and extension.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><returns>The characters after the last directory separator character in <paramref name="path" />. If the last character of <paramref name="path" /> is a directory or volume separator character, this method returns <see cref="F:System.String.Empty" />. If <paramref name="path" /> is <see langword="null" />, this method returns <see langword="null" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetFileNameWithoutExtension(System.String)">
            <summary>Returns the file name of the specified path string without the extension.</summary><param name="path">The path of the file.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><returns>The string returned by <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, minus the last period (.) and all characters following it.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetFullPath(System.String)">
            <summary>Returns the absolute path for the specified path string.</summary><param name="path">The file or directory for which to obtain absolute path information.</param><exception cref="T:System.ArgumentException"><paramref name="path" /> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.

-or-

 The system could not retrieve the absolute path.</exception><exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.NotSupportedException"><paramref name="path" /> contains a colon (":") that is not part of a volume identifier (for example, "c:\").</exception><exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length.</exception><returns>The fully qualified location of <paramref name="path" />, such as "C:\MyFile.txt".</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetFullPath(System.String,System.String)">
            <summary>Returns an absolute path from a relative path and a fully qualified base path.</summary><param name="path">A relative path to concatenate to <paramref name="basePath" />.</param><param name="basePath">The beginning of a fully qualified path.</param><exception cref="T:System.ArgumentNullException"><paramref name="path" /> or <paramref name="basePath" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="basePath" /> is not a fully qualified path.

-or-

<paramref name="path" /> or <paramref name="basePath" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><returns>The absolute path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetInvalidFileNameChars">
            <summary>Gets an array containing the characters that are not allowed in file names.</summary><returns>An array containing the characters that are not allowed in file names.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetInvalidPathChars">
            <summary>Gets an array containing the characters that are not allowed in path names.</summary><returns>An array containing the characters that are not allowed in path names.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetPathRoot(System.String)">
            <summary>Gets the root directory information from the path contained in the specified string.</summary><param name="path">A string containing the path from which to obtain root directory information.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.

-or-

.NET Framework only: <see cref="F:System.String.Empty" /> was passed to <paramref name="path" />.</exception><returns>The root directory of <paramref name="path" /> if it is rooted.

 -or-
 
<see cref="F:System.String.Empty" /> if <paramref name="path" /> does not contain root directory information.

 -or-
 
<see langword="null" /> if <paramref name="path" /> is <see langword="null" /> or is effectively empty.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetRandomFileName">
            <summary>Returns a random folder name or file name.</summary><returns>A random folder name or file name.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetTempFileName">
            <summary>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</summary><exception cref="T:System.IO.IOException">An I/O error occurs, such as no unique temporary file name is available.  
  
-or-
  
 This method was unable to create a temporary file.</exception><returns>The full path of the temporary file.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetTempPath">
            <summary>Returns the path of the current user's temporary folder.</summary><exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception><returns>The path to the temporary folder, ending with a  <see cref="F:System.IO.Path.DirectorySeparatorChar" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.HasExtension(System.String)">
            <summary>Determines whether a path includes a file name extension.</summary><param name="path">The path to search for an extension.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><returns><see langword="true" /> if the characters that follow the last directory separator (\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.IsPathFullyQualified(System.String)">
            <summary>Returns a value that indicates whether the specified file path is fixed to a specific drive or UNC path.</summary><param name="path">A file path.</param><exception cref="T:System.ArgumentNullException"><paramref name="path" /> is <see langword="null" />.</exception><returns><see langword="true" /> if the path is fixed to a specific drive or UNC path; <see langword="false" /> if the path is relative to the current drive or working directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetRelativePath(System.String,System.String)">
            <summary>Returns a relative path from one path to another.</summary><param name="relativeTo">The source path the result should be relative to. This path is always considered to be a directory.</param><param name="path">The destination path.</param><exception cref="T:System.ArgumentNullException"><paramref name="relativeTo" /> or <paramref name="path" /> is <see langword="null" />.</exception><exception cref="T:System.ArgumentException"><paramref name="relativeTo" /> or <paramref name="path" /> is effectively empty.</exception><returns>The relative path, or <paramref name="path" /> if the paths don't share the same root.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>Concatenates two path components into a single path.</summary><param name="path1">A character span that contains the first path to join.</param><param name="path2">A character span that contains the second path to join.</param><returns>The combined paths.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>Concatenates three path components into a single path.</summary><param name="path1">A character span that contains the first path to join.</param><param name="path2">A character span that contains the second path to join.</param><param name="path3">A character span that contains the third path to join.</param><returns>The concatenated path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
            <summary>Attempts to concatenate two path components to a single preallocated character span, and returns a value that indicates whether the operation succeeded.</summary><param name="path1">A character span that contains the first path to join.</param><param name="path2">A character span that contains the second path to join.</param><param name="destination">A character span to hold the concatenated path.</param><param name="charsWritten">When the method returns, a value that indicates the number of characters written to the <paramref name="destination" />.</param><returns><see langword="true" /> if the concatenation operation is successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.TryJoin(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
            <summary>Attempts to concatenate two path components to a single preallocated character span, and returns a value that indicates whether the operation succeeded.</summary><param name="path1">A character span that contains the first path to join.</param><param name="path2">A character span that contains the second path to join.</param><param name="path3">A character span that contains the third path to join.</param><param name="destination">A character span to hold the concatenated path.</param><param name="charsWritten">When the method returns, a value that indicates the number of characters written to the <paramref name="destination" />.</param><returns><see langword="true" /> if the concatenation operation is successful; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.IsPathRooted(System.String)">
            <summary>Returns a value indicating whether the specified path string contains a root.</summary><param name="path">The path to test.</param><exception cref="T:System.ArgumentException">.NET Framework and .NET Core versions older than 2.1: <paramref name="path" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception><returns><see langword="true" /> if <paramref name="path" /> contains a root; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.EndsInDirectorySeparator(System.ReadOnlySpan{System.Char})">
            <summary>Returns a value that indicates whether the path, specified as a read-only span, ends in a directory separator.</summary><param name="path">The path to analyze.</param><returns><see langword="true" /> if the path ends in a directory separator; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.EndsInDirectorySeparator(System.String)">
            <summary>Returns a value that indicates whether the specified path ends in a directory separator.</summary><param name="path">The path to analyze.</param><returns><see langword="true" /> if the path ends in a directory separator; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.TrimEndingDirectorySeparator(System.ReadOnlySpan{System.Char})">
            <summary>Trims one trailing directory separator beyond the root of the specified path.</summary><param name="path">The path to trim.</param><returns>The <paramref name="path" /> without any trailing directory separators.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.TrimEndingDirectorySeparator(System.String)">
            <summary>Trims one trailing directory separator beyond the root of the specified path.</summary><param name="path">The path to trim.</param><returns>The <paramref name="path" /> without any trailing directory separators.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.HasExtension(System.ReadOnlySpan{System.Char})">
            <summary>Determines whether the path represented by the specified character span includes a file name extension.</summary><param name="path">The path to search for an extension.</param><returns><see langword="true" /> if the characters that follow the last directory separator character or volume separator in the path include a period (".") followed by one or more characters; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.IsPathFullyQualified(System.ReadOnlySpan{System.Char})">
            <summary>Returns a value that indicates whether the file path represented by the specified character span is fixed to a specific drive or UNC path.</summary><param name="path">A file path.</param><returns><see langword="true" /> if the path is fixed to a specific drive or UNC path; <see langword="false" /> if the path is relative to the current drive or working directory.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.IsPathRooted(System.ReadOnlySpan{System.Char})">
            <summary>Returns a value that indicates whether the specified character span that represents a file path contains a root.</summary><param name="path">The path to test.</param><returns><see langword="true" /> if <paramref name="path" /> contains a root; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetDirectoryName(System.ReadOnlySpan{System.Char})">
            <summary>Returns the directory information for the specified path represented by a character span.</summary><param name="path">The path to retrieve the directory information from.</param><returns>Directory information for <paramref name="path" />, or an empty span if <paramref name="path" /> is <see langword="null" />, an empty span, or a root (such as \, C:, or \\server\share).</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetExtension(System.ReadOnlySpan{System.Char})">
            <summary>Returns the extension of a file path that is represented by a read-only character span.</summary><param name="path">The file path from which to get the extension.</param><returns>The extension of the specified path (including the period, "."), or <see cref="P:System.ReadOnlySpan`1.Empty" /> if <paramref name="path" /> does not have extension information.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetFileName(System.ReadOnlySpan{System.Char})">
            <summary>Returns the file name and extension of a file path that is represented by a read-only character span.</summary><param name="path">A read-only span that contains the path from which to obtain the file name and extension.</param><returns>The characters after the last directory separator character in <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetFileNameWithoutExtension(System.ReadOnlySpan{System.Char})">
            <summary>Returns the file name without the extension of a file path that is represented by a read-only character span.</summary><param name="path">A read-only span that contains the path from which to obtain the file name without the extension.</param><returns>The characters in the read-only span returned by <see cref="M:System.IO.Path.GetFileName(System.ReadOnlySpan{System.Char})" />, minus the last period (.) and all characters following it.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.GetPathRoot(System.ReadOnlySpan{System.Char})">
            <summary>Gets the root directory information from the path contained in the specified character span.</summary><param name="path">A read-only span of characters containing the path from which to obtain root directory information.</param><returns>A read-only span of characters containing the root directory of <paramref name="path" />.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.Join(System.String,System.String,System.String,System.String)">
            <summary>Concatenates four paths into a single path.</summary><param name="path1">The first path to join.</param><param name="path2">The second path to join.</param><param name="path3">The third path to join.</param><param name="path4">The fourth path to join.</param><returns>The concatenated path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.Join(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>Concatenates four path components into a single path.</summary><param name="path1">A character span that contains the first path to join.</param><param name="path2">A character span that contains the second path to join.</param><param name="path3">A character span that contains the third path to join.</param><param name="path4">A character span that contains the fourth path to join.</param><returns>The concatenated path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.Join(System.String,System.String)">
            <summary>Concatenates two paths into a single path.</summary><param name="path1">The first path to join.</param><param name="path2">The second path to join.</param><returns>The concatenated path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.Join(System.String,System.String,System.String)">
            <summary>Concatenates three paths into a single path.</summary><param name="path1">The first path to join.</param><param name="path2">The second path to join.</param><param name="path3">The third path to join.</param><returns>The concatenated path.</returns>
        </member>
        <member name="M:System.IO.Abstractions.PathWrapper.Join(System.String[])">
            <summary>Concatenates an array of paths into a single path.</summary><param name="paths">An array of paths.</param><returns>The concatenated path.</returns>
        </member>
    </members>
</doc>
